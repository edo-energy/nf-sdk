// source: normalgw/bacnet/bacnet.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('../../google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var normalgw_bacnet_bacenum_pb = require('../../normalgw/bacnet/bacenum_pb.js');
goog.object.extend(proto, normalgw_bacnet_bacenum_pb);
goog.exportSymbol('proto.normalgw.bacnet.ApplicationDataValue', null, global);
goog.exportSymbol('proto.normalgw.bacnet.ApplicationDataValue.ValueCase', null, global);
goog.exportSymbol('proto.normalgw.bacnet.DeviceAddress', null, global);
goog.exportSymbol('proto.normalgw.bacnet.Error', null, global);
goog.exportSymbol('proto.normalgw.bacnet.Error.ErrorTypeCase', null, global);
goog.exportSymbol('proto.normalgw.bacnet.GetConfigurationReply', null, global);
goog.exportSymbol('proto.normalgw.bacnet.GetConfigurationReply.BBMDStatus', null, global);
goog.exportSymbol('proto.normalgw.bacnet.GetConfigurationReply.Interface', null, global);
goog.exportSymbol('proto.normalgw.bacnet.GetConfigurationRequest', null, global);
goog.exportSymbol('proto.normalgw.bacnet.ObjectId', null, global);
goog.exportSymbol('proto.normalgw.bacnet.ObjectPropertyReference', null, global);
goog.exportSymbol('proto.normalgw.bacnet.OperationOptions', null, global);
goog.exportSymbol('proto.normalgw.bacnet.ReadAccessData', null, global);
goog.exportSymbol('proto.normalgw.bacnet.ReadFileReply', null, global);
goog.exportSymbol('proto.normalgw.bacnet.ReadFileRequest', null, global);
goog.exportSymbol('proto.normalgw.bacnet.ReadPropMultipleReply', null, global);
goog.exportSymbol('proto.normalgw.bacnet.ReadPropMultipleRequest', null, global);
goog.exportSymbol('proto.normalgw.bacnet.ReadPropertyReply', null, global);
goog.exportSymbol('proto.normalgw.bacnet.ReadPropertyRequest', null, global);
goog.exportSymbol('proto.normalgw.bacnet.RegisterWithBbmdReply', null, global);
goog.exportSymbol('proto.normalgw.bacnet.RegisterWithBbmdRequest', null, global);
goog.exportSymbol('proto.normalgw.bacnet.SetConfigurationReply', null, global);
goog.exportSymbol('proto.normalgw.bacnet.SetConfigurationRequest', null, global);
goog.exportSymbol('proto.normalgw.bacnet.WhoIsReply', null, global);
goog.exportSymbol('proto.normalgw.bacnet.WhoIsRequest', null, global);
goog.exportSymbol('proto.normalgw.bacnet.WhoIsRouterReply', null, global);
goog.exportSymbol('proto.normalgw.bacnet.WhoIsRouterRequest', null, global);
goog.exportSymbol('proto.normalgw.bacnet.WritePropertyReply', null, global);
goog.exportSymbol('proto.normalgw.bacnet.WritePropertyRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.normalgw.bacnet.DeviceAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.normalgw.bacnet.DeviceAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.normalgw.bacnet.DeviceAddress.displayName = 'proto.normalgw.bacnet.DeviceAddress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.normalgw.bacnet.ObjectId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.normalgw.bacnet.ObjectId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.normalgw.bacnet.ObjectId.displayName = 'proto.normalgw.bacnet.ObjectId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.normalgw.bacnet.OperationOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.normalgw.bacnet.OperationOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.normalgw.bacnet.OperationOptions.displayName = 'proto.normalgw.bacnet.OperationOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.normalgw.bacnet.ReadPropertyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.normalgw.bacnet.ReadPropertyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.normalgw.bacnet.ReadPropertyRequest.displayName = 'proto.normalgw.bacnet.ReadPropertyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.normalgw.bacnet.ReadPropertyReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.normalgw.bacnet.ReadPropertyReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.normalgw.bacnet.ReadPropertyReply.displayName = 'proto.normalgw.bacnet.ReadPropertyReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.normalgw.bacnet.ReadAccessData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.normalgw.bacnet.ReadAccessData.repeatedFields_, null);
};
goog.inherits(proto.normalgw.bacnet.ReadAccessData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.normalgw.bacnet.ReadAccessData.displayName = 'proto.normalgw.bacnet.ReadAccessData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.normalgw.bacnet.ReadPropMultipleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.normalgw.bacnet.ReadPropMultipleRequest.repeatedFields_, null);
};
goog.inherits(proto.normalgw.bacnet.ReadPropMultipleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.normalgw.bacnet.ReadPropMultipleRequest.displayName = 'proto.normalgw.bacnet.ReadPropMultipleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.normalgw.bacnet.ReadPropMultipleReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.normalgw.bacnet.ReadPropMultipleReply.repeatedFields_, null);
};
goog.inherits(proto.normalgw.bacnet.ReadPropMultipleReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.normalgw.bacnet.ReadPropMultipleReply.displayName = 'proto.normalgw.bacnet.ReadPropMultipleReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.normalgw.bacnet.WhoIsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.normalgw.bacnet.WhoIsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.normalgw.bacnet.WhoIsRequest.displayName = 'proto.normalgw.bacnet.WhoIsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.normalgw.bacnet.WhoIsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.normalgw.bacnet.WhoIsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.normalgw.bacnet.WhoIsReply.displayName = 'proto.normalgw.bacnet.WhoIsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.normalgw.bacnet.WhoIsRouterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.normalgw.bacnet.WhoIsRouterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.normalgw.bacnet.WhoIsRouterRequest.displayName = 'proto.normalgw.bacnet.WhoIsRouterRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.normalgw.bacnet.WhoIsRouterReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.normalgw.bacnet.WhoIsRouterReply.repeatedFields_, null);
};
goog.inherits(proto.normalgw.bacnet.WhoIsRouterReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.normalgw.bacnet.WhoIsRouterReply.displayName = 'proto.normalgw.bacnet.WhoIsRouterReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.normalgw.bacnet.ReadFileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.normalgw.bacnet.ReadFileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.normalgw.bacnet.ReadFileRequest.displayName = 'proto.normalgw.bacnet.ReadFileRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.normalgw.bacnet.ReadFileReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.normalgw.bacnet.ReadFileReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.normalgw.bacnet.ReadFileReply.displayName = 'proto.normalgw.bacnet.ReadFileReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.normalgw.bacnet.RegisterWithBbmdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.normalgw.bacnet.RegisterWithBbmdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.normalgw.bacnet.RegisterWithBbmdRequest.displayName = 'proto.normalgw.bacnet.RegisterWithBbmdRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.normalgw.bacnet.RegisterWithBbmdReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.normalgw.bacnet.RegisterWithBbmdReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.normalgw.bacnet.RegisterWithBbmdReply.displayName = 'proto.normalgw.bacnet.RegisterWithBbmdReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.normalgw.bacnet.WritePropertyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.normalgw.bacnet.WritePropertyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.normalgw.bacnet.WritePropertyRequest.displayName = 'proto.normalgw.bacnet.WritePropertyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.normalgw.bacnet.WritePropertyReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.normalgw.bacnet.WritePropertyReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.normalgw.bacnet.WritePropertyReply.displayName = 'proto.normalgw.bacnet.WritePropertyReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.normalgw.bacnet.ApplicationDataValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.normalgw.bacnet.ApplicationDataValue.repeatedFields_, proto.normalgw.bacnet.ApplicationDataValue.oneofGroups_);
};
goog.inherits(proto.normalgw.bacnet.ApplicationDataValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.normalgw.bacnet.ApplicationDataValue.displayName = 'proto.normalgw.bacnet.ApplicationDataValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.normalgw.bacnet.ObjectPropertyReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.normalgw.bacnet.ObjectPropertyReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.normalgw.bacnet.ObjectPropertyReference.displayName = 'proto.normalgw.bacnet.ObjectPropertyReference';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.normalgw.bacnet.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.normalgw.bacnet.Error.oneofGroups_);
};
goog.inherits(proto.normalgw.bacnet.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.normalgw.bacnet.Error.displayName = 'proto.normalgw.bacnet.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.normalgw.bacnet.GetConfigurationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.normalgw.bacnet.GetConfigurationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.normalgw.bacnet.GetConfigurationRequest.displayName = 'proto.normalgw.bacnet.GetConfigurationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.normalgw.bacnet.GetConfigurationReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.normalgw.bacnet.GetConfigurationReply.repeatedFields_, null);
};
goog.inherits(proto.normalgw.bacnet.GetConfigurationReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.normalgw.bacnet.GetConfigurationReply.displayName = 'proto.normalgw.bacnet.GetConfigurationReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.normalgw.bacnet.GetConfigurationReply.Interface = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.normalgw.bacnet.GetConfigurationReply.Interface.repeatedFields_, null);
};
goog.inherits(proto.normalgw.bacnet.GetConfigurationReply.Interface, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.normalgw.bacnet.GetConfigurationReply.Interface.displayName = 'proto.normalgw.bacnet.GetConfigurationReply.Interface';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.normalgw.bacnet.SetConfigurationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.normalgw.bacnet.SetConfigurationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.normalgw.bacnet.SetConfigurationRequest.displayName = 'proto.normalgw.bacnet.SetConfigurationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.normalgw.bacnet.SetConfigurationReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.normalgw.bacnet.SetConfigurationReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.normalgw.bacnet.SetConfigurationReply.displayName = 'proto.normalgw.bacnet.SetConfigurationReply';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.normalgw.bacnet.DeviceAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.normalgw.bacnet.DeviceAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.normalgw.bacnet.DeviceAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.DeviceAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    mac: msg.getMac_asB64(),
    net: jspb.Message.getFieldWithDefault(msg, 2, 0),
    adr: msg.getAdr_asB64(),
    maxApdu: jspb.Message.getFieldWithDefault(msg, 4, 0),
    deviceId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    bbmd: msg.getBbmd_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.normalgw.bacnet.DeviceAddress}
 */
proto.normalgw.bacnet.DeviceAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.normalgw.bacnet.DeviceAddress;
  return proto.normalgw.bacnet.DeviceAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.normalgw.bacnet.DeviceAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.normalgw.bacnet.DeviceAddress}
 */
proto.normalgw.bacnet.DeviceAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMac(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNet(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAdr(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxApdu(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceId(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBbmd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.DeviceAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.normalgw.bacnet.DeviceAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.normalgw.bacnet.DeviceAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.DeviceAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMac_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getNet();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getAdr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getMaxApdu();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getDeviceId();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getBbmd_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional bytes mac = 1;
 * @return {!(string|Uint8Array)}
 */
proto.normalgw.bacnet.DeviceAddress.prototype.getMac = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes mac = 1;
 * This is a type-conversion wrapper around `getMac()`
 * @return {string}
 */
proto.normalgw.bacnet.DeviceAddress.prototype.getMac_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMac()));
};


/**
 * optional bytes mac = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMac()`
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.DeviceAddress.prototype.getMac_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMac()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.normalgw.bacnet.DeviceAddress} returns this
 */
proto.normalgw.bacnet.DeviceAddress.prototype.setMac = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 net = 2;
 * @return {number}
 */
proto.normalgw.bacnet.DeviceAddress.prototype.getNet = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.DeviceAddress} returns this
 */
proto.normalgw.bacnet.DeviceAddress.prototype.setNet = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes adr = 3;
 * @return {!(string|Uint8Array)}
 */
proto.normalgw.bacnet.DeviceAddress.prototype.getAdr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes adr = 3;
 * This is a type-conversion wrapper around `getAdr()`
 * @return {string}
 */
proto.normalgw.bacnet.DeviceAddress.prototype.getAdr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAdr()));
};


/**
 * optional bytes adr = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAdr()`
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.DeviceAddress.prototype.getAdr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAdr()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.normalgw.bacnet.DeviceAddress} returns this
 */
proto.normalgw.bacnet.DeviceAddress.prototype.setAdr = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint32 max_apdu = 4;
 * @return {number}
 */
proto.normalgw.bacnet.DeviceAddress.prototype.getMaxApdu = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.DeviceAddress} returns this
 */
proto.normalgw.bacnet.DeviceAddress.prototype.setMaxApdu = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 device_id = 5;
 * @return {number}
 */
proto.normalgw.bacnet.DeviceAddress.prototype.getDeviceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.DeviceAddress} returns this
 */
proto.normalgw.bacnet.DeviceAddress.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes bbmd = 6;
 * @return {!(string|Uint8Array)}
 */
proto.normalgw.bacnet.DeviceAddress.prototype.getBbmd = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes bbmd = 6;
 * This is a type-conversion wrapper around `getBbmd()`
 * @return {string}
 */
proto.normalgw.bacnet.DeviceAddress.prototype.getBbmd_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBbmd()));
};


/**
 * optional bytes bbmd = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBbmd()`
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.DeviceAddress.prototype.getBbmd_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBbmd()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.normalgw.bacnet.DeviceAddress} returns this
 */
proto.normalgw.bacnet.DeviceAddress.prototype.setBbmd = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.normalgw.bacnet.ObjectId.prototype.toObject = function(opt_includeInstance) {
  return proto.normalgw.bacnet.ObjectId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.normalgw.bacnet.ObjectId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.ObjectId.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    instance: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.normalgw.bacnet.ObjectId}
 */
proto.normalgw.bacnet.ObjectId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.normalgw.bacnet.ObjectId;
  return proto.normalgw.bacnet.ObjectId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.normalgw.bacnet.ObjectId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.normalgw.bacnet.ObjectId}
 */
proto.normalgw.bacnet.ObjectId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.normalgw.bacnet.ObjectType} */ (reader.readEnum());
      msg.setObjectType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.ObjectId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.normalgw.bacnet.ObjectId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.normalgw.bacnet.ObjectId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.ObjectId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getInstance();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional ObjectType object_type = 1;
 * @return {!proto.normalgw.bacnet.ObjectType}
 */
proto.normalgw.bacnet.ObjectId.prototype.getObjectType = function() {
  return /** @type {!proto.normalgw.bacnet.ObjectType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.normalgw.bacnet.ObjectType} value
 * @return {!proto.normalgw.bacnet.ObjectId} returns this
 */
proto.normalgw.bacnet.ObjectId.prototype.setObjectType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 instance = 2;
 * @return {number}
 */
proto.normalgw.bacnet.ObjectId.prototype.getInstance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.ObjectId} returns this
 */
proto.normalgw.bacnet.ObjectId.prototype.setInstance = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.normalgw.bacnet.OperationOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.normalgw.bacnet.OperationOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.normalgw.bacnet.OperationOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.OperationOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeout: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    unmergeable: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    priority: jspb.Message.getFieldWithDefault(msg, 3, 0),
    continueOnError: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    blockLowerPriority: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.normalgw.bacnet.OperationOptions}
 */
proto.normalgw.bacnet.OperationOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.normalgw.bacnet.OperationOptions;
  return proto.normalgw.bacnet.OperationOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.normalgw.bacnet.OperationOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.normalgw.bacnet.OperationOptions}
 */
proto.normalgw.bacnet.OperationOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTimeout(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUnmergeable(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPriority(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setContinueOnError(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBlockLowerPriority(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.OperationOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.normalgw.bacnet.OperationOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.normalgw.bacnet.OperationOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.OperationOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeout();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getUnmergeable();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getPriority();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getContinueOnError();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getBlockLowerPriority();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional float timeout = 1;
 * @return {number}
 */
proto.normalgw.bacnet.OperationOptions.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.OperationOptions} returns this
 */
proto.normalgw.bacnet.OperationOptions.prototype.setTimeout = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional bool unmergeable = 2;
 * @return {boolean}
 */
proto.normalgw.bacnet.OperationOptions.prototype.getUnmergeable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.normalgw.bacnet.OperationOptions} returns this
 */
proto.normalgw.bacnet.OperationOptions.prototype.setUnmergeable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int32 priority = 3;
 * @return {number}
 */
proto.normalgw.bacnet.OperationOptions.prototype.getPriority = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.OperationOptions} returns this
 */
proto.normalgw.bacnet.OperationOptions.prototype.setPriority = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool continue_on_error = 4;
 * @return {boolean}
 */
proto.normalgw.bacnet.OperationOptions.prototype.getContinueOnError = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.normalgw.bacnet.OperationOptions} returns this
 */
proto.normalgw.bacnet.OperationOptions.prototype.setContinueOnError = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool block_lower_priority = 5;
 * @return {boolean}
 */
proto.normalgw.bacnet.OperationOptions.prototype.getBlockLowerPriority = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.normalgw.bacnet.OperationOptions} returns this
 */
proto.normalgw.bacnet.OperationOptions.prototype.setBlockLowerPriority = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.normalgw.bacnet.ReadPropertyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.normalgw.bacnet.ReadPropertyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.normalgw.bacnet.ReadPropertyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.ReadPropertyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceAddress: (f = msg.getDeviceAddress()) && proto.normalgw.bacnet.DeviceAddress.toObject(includeInstance, f),
    objectId: (f = msg.getObjectId()) && proto.normalgw.bacnet.ObjectId.toObject(includeInstance, f),
    propertyId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    arrayIndex: jspb.Message.getFieldWithDefault(msg, 4, 0),
    options: (f = msg.getOptions()) && proto.normalgw.bacnet.OperationOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.normalgw.bacnet.ReadPropertyRequest}
 */
proto.normalgw.bacnet.ReadPropertyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.normalgw.bacnet.ReadPropertyRequest;
  return proto.normalgw.bacnet.ReadPropertyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.normalgw.bacnet.ReadPropertyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.normalgw.bacnet.ReadPropertyRequest}
 */
proto.normalgw.bacnet.ReadPropertyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.normalgw.bacnet.DeviceAddress;
      reader.readMessage(value,proto.normalgw.bacnet.DeviceAddress.deserializeBinaryFromReader);
      msg.setDeviceAddress(value);
      break;
    case 2:
      var value = new proto.normalgw.bacnet.ObjectId;
      reader.readMessage(value,proto.normalgw.bacnet.ObjectId.deserializeBinaryFromReader);
      msg.setObjectId(value);
      break;
    case 3:
      var value = /** @type {!proto.normalgw.bacnet.PropertyId} */ (reader.readEnum());
      msg.setPropertyId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setArrayIndex(value);
      break;
    case 5:
      var value = new proto.normalgw.bacnet.OperationOptions;
      reader.readMessage(value,proto.normalgw.bacnet.OperationOptions.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.ReadPropertyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.normalgw.bacnet.ReadPropertyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.normalgw.bacnet.ReadPropertyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.ReadPropertyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceAddress();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.normalgw.bacnet.DeviceAddress.serializeBinaryToWriter
    );
  }
  f = message.getObjectId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.normalgw.bacnet.ObjectId.serializeBinaryToWriter
    );
  }
  f = message.getPropertyId();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getArrayIndex();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getOptions();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.normalgw.bacnet.OperationOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional DeviceAddress device_address = 1;
 * @return {?proto.normalgw.bacnet.DeviceAddress}
 */
proto.normalgw.bacnet.ReadPropertyRequest.prototype.getDeviceAddress = function() {
  return /** @type{?proto.normalgw.bacnet.DeviceAddress} */ (
    jspb.Message.getWrapperField(this, proto.normalgw.bacnet.DeviceAddress, 1));
};


/**
 * @param {?proto.normalgw.bacnet.DeviceAddress|undefined} value
 * @return {!proto.normalgw.bacnet.ReadPropertyRequest} returns this
*/
proto.normalgw.bacnet.ReadPropertyRequest.prototype.setDeviceAddress = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.normalgw.bacnet.ReadPropertyRequest} returns this
 */
proto.normalgw.bacnet.ReadPropertyRequest.prototype.clearDeviceAddress = function() {
  return this.setDeviceAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.ReadPropertyRequest.prototype.hasDeviceAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ObjectId object_id = 2;
 * @return {?proto.normalgw.bacnet.ObjectId}
 */
proto.normalgw.bacnet.ReadPropertyRequest.prototype.getObjectId = function() {
  return /** @type{?proto.normalgw.bacnet.ObjectId} */ (
    jspb.Message.getWrapperField(this, proto.normalgw.bacnet.ObjectId, 2));
};


/**
 * @param {?proto.normalgw.bacnet.ObjectId|undefined} value
 * @return {!proto.normalgw.bacnet.ReadPropertyRequest} returns this
*/
proto.normalgw.bacnet.ReadPropertyRequest.prototype.setObjectId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.normalgw.bacnet.ReadPropertyRequest} returns this
 */
proto.normalgw.bacnet.ReadPropertyRequest.prototype.clearObjectId = function() {
  return this.setObjectId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.ReadPropertyRequest.prototype.hasObjectId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PropertyId property_id = 3;
 * @return {!proto.normalgw.bacnet.PropertyId}
 */
proto.normalgw.bacnet.ReadPropertyRequest.prototype.getPropertyId = function() {
  return /** @type {!proto.normalgw.bacnet.PropertyId} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.normalgw.bacnet.PropertyId} value
 * @return {!proto.normalgw.bacnet.ReadPropertyRequest} returns this
 */
proto.normalgw.bacnet.ReadPropertyRequest.prototype.setPropertyId = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint32 array_index = 4;
 * @return {number}
 */
proto.normalgw.bacnet.ReadPropertyRequest.prototype.getArrayIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.ReadPropertyRequest} returns this
 */
proto.normalgw.bacnet.ReadPropertyRequest.prototype.setArrayIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional OperationOptions options = 5;
 * @return {?proto.normalgw.bacnet.OperationOptions}
 */
proto.normalgw.bacnet.ReadPropertyRequest.prototype.getOptions = function() {
  return /** @type{?proto.normalgw.bacnet.OperationOptions} */ (
    jspb.Message.getWrapperField(this, proto.normalgw.bacnet.OperationOptions, 5));
};


/**
 * @param {?proto.normalgw.bacnet.OperationOptions|undefined} value
 * @return {!proto.normalgw.bacnet.ReadPropertyRequest} returns this
*/
proto.normalgw.bacnet.ReadPropertyRequest.prototype.setOptions = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.normalgw.bacnet.ReadPropertyRequest} returns this
 */
proto.normalgw.bacnet.ReadPropertyRequest.prototype.clearOptions = function() {
  return this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.ReadPropertyRequest.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.normalgw.bacnet.ReadPropertyReply.prototype.toObject = function(opt_includeInstance) {
  return proto.normalgw.bacnet.ReadPropertyReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.normalgw.bacnet.ReadPropertyReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.ReadPropertyReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    property: (f = msg.getProperty()) && proto.normalgw.bacnet.ObjectPropertyReference.toObject(includeInstance, f),
    value: (f = msg.getValue()) && proto.normalgw.bacnet.ApplicationDataValue.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.normalgw.bacnet.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.normalgw.bacnet.ReadPropertyReply}
 */
proto.normalgw.bacnet.ReadPropertyReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.normalgw.bacnet.ReadPropertyReply;
  return proto.normalgw.bacnet.ReadPropertyReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.normalgw.bacnet.ReadPropertyReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.normalgw.bacnet.ReadPropertyReply}
 */
proto.normalgw.bacnet.ReadPropertyReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.normalgw.bacnet.ObjectPropertyReference;
      reader.readMessage(value,proto.normalgw.bacnet.ObjectPropertyReference.deserializeBinaryFromReader);
      msg.setProperty(value);
      break;
    case 2:
      var value = new proto.normalgw.bacnet.ApplicationDataValue;
      reader.readMessage(value,proto.normalgw.bacnet.ApplicationDataValue.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 3:
      var value = new proto.normalgw.bacnet.Error;
      reader.readMessage(value,proto.normalgw.bacnet.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.ReadPropertyReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.normalgw.bacnet.ReadPropertyReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.normalgw.bacnet.ReadPropertyReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.ReadPropertyReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProperty();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.normalgw.bacnet.ObjectPropertyReference.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.normalgw.bacnet.ApplicationDataValue.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.normalgw.bacnet.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional ObjectPropertyReference property = 1;
 * @return {?proto.normalgw.bacnet.ObjectPropertyReference}
 */
proto.normalgw.bacnet.ReadPropertyReply.prototype.getProperty = function() {
  return /** @type{?proto.normalgw.bacnet.ObjectPropertyReference} */ (
    jspb.Message.getWrapperField(this, proto.normalgw.bacnet.ObjectPropertyReference, 1));
};


/**
 * @param {?proto.normalgw.bacnet.ObjectPropertyReference|undefined} value
 * @return {!proto.normalgw.bacnet.ReadPropertyReply} returns this
*/
proto.normalgw.bacnet.ReadPropertyReply.prototype.setProperty = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.normalgw.bacnet.ReadPropertyReply} returns this
 */
proto.normalgw.bacnet.ReadPropertyReply.prototype.clearProperty = function() {
  return this.setProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.ReadPropertyReply.prototype.hasProperty = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ApplicationDataValue value = 2;
 * @return {?proto.normalgw.bacnet.ApplicationDataValue}
 */
proto.normalgw.bacnet.ReadPropertyReply.prototype.getValue = function() {
  return /** @type{?proto.normalgw.bacnet.ApplicationDataValue} */ (
    jspb.Message.getWrapperField(this, proto.normalgw.bacnet.ApplicationDataValue, 2));
};


/**
 * @param {?proto.normalgw.bacnet.ApplicationDataValue|undefined} value
 * @return {!proto.normalgw.bacnet.ReadPropertyReply} returns this
*/
proto.normalgw.bacnet.ReadPropertyReply.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.normalgw.bacnet.ReadPropertyReply} returns this
 */
proto.normalgw.bacnet.ReadPropertyReply.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.ReadPropertyReply.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Error error = 3;
 * @return {?proto.normalgw.bacnet.Error}
 */
proto.normalgw.bacnet.ReadPropertyReply.prototype.getError = function() {
  return /** @type{?proto.normalgw.bacnet.Error} */ (
    jspb.Message.getWrapperField(this, proto.normalgw.bacnet.Error, 3));
};


/**
 * @param {?proto.normalgw.bacnet.Error|undefined} value
 * @return {!proto.normalgw.bacnet.ReadPropertyReply} returns this
*/
proto.normalgw.bacnet.ReadPropertyReply.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.normalgw.bacnet.ReadPropertyReply} returns this
 */
proto.normalgw.bacnet.ReadPropertyReply.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.ReadPropertyReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.normalgw.bacnet.ReadAccessData.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.normalgw.bacnet.ReadAccessData.prototype.toObject = function(opt_includeInstance) {
  return proto.normalgw.bacnet.ReadAccessData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.normalgw.bacnet.ReadAccessData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.ReadAccessData.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectId: (f = msg.getObjectId()) && proto.normalgw.bacnet.ObjectId.toObject(includeInstance, f),
    listOfPropertiesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.normalgw.bacnet.ReadAccessData}
 */
proto.normalgw.bacnet.ReadAccessData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.normalgw.bacnet.ReadAccessData;
  return proto.normalgw.bacnet.ReadAccessData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.normalgw.bacnet.ReadAccessData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.normalgw.bacnet.ReadAccessData}
 */
proto.normalgw.bacnet.ReadAccessData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.normalgw.bacnet.ObjectId;
      reader.readMessage(value,proto.normalgw.bacnet.ObjectId.deserializeBinaryFromReader);
      msg.setObjectId(value);
      break;
    case 2:
      var value = /** @type {!Array<!proto.normalgw.bacnet.PropertyId>} */ (reader.readPackedEnum());
      msg.setListOfPropertiesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.ReadAccessData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.normalgw.bacnet.ReadAccessData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.normalgw.bacnet.ReadAccessData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.ReadAccessData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.normalgw.bacnet.ObjectId.serializeBinaryToWriter
    );
  }
  f = message.getListOfPropertiesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
};


/**
 * optional ObjectId object_id = 1;
 * @return {?proto.normalgw.bacnet.ObjectId}
 */
proto.normalgw.bacnet.ReadAccessData.prototype.getObjectId = function() {
  return /** @type{?proto.normalgw.bacnet.ObjectId} */ (
    jspb.Message.getWrapperField(this, proto.normalgw.bacnet.ObjectId, 1));
};


/**
 * @param {?proto.normalgw.bacnet.ObjectId|undefined} value
 * @return {!proto.normalgw.bacnet.ReadAccessData} returns this
*/
proto.normalgw.bacnet.ReadAccessData.prototype.setObjectId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.normalgw.bacnet.ReadAccessData} returns this
 */
proto.normalgw.bacnet.ReadAccessData.prototype.clearObjectId = function() {
  return this.setObjectId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.ReadAccessData.prototype.hasObjectId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PropertyId list_of_properties = 2;
 * @return {!Array<!proto.normalgw.bacnet.PropertyId>}
 */
proto.normalgw.bacnet.ReadAccessData.prototype.getListOfPropertiesList = function() {
  return /** @type {!Array<!proto.normalgw.bacnet.PropertyId>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<!proto.normalgw.bacnet.PropertyId>} value
 * @return {!proto.normalgw.bacnet.ReadAccessData} returns this
 */
proto.normalgw.bacnet.ReadAccessData.prototype.setListOfPropertiesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.normalgw.bacnet.PropertyId} value
 * @param {number=} opt_index
 * @return {!proto.normalgw.bacnet.ReadAccessData} returns this
 */
proto.normalgw.bacnet.ReadAccessData.prototype.addListOfProperties = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.normalgw.bacnet.ReadAccessData} returns this
 */
proto.normalgw.bacnet.ReadAccessData.prototype.clearListOfPropertiesList = function() {
  return this.setListOfPropertiesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.normalgw.bacnet.ReadPropMultipleRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.normalgw.bacnet.ReadPropMultipleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.normalgw.bacnet.ReadPropMultipleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.normalgw.bacnet.ReadPropMultipleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.ReadPropMultipleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceAddress: (f = msg.getDeviceAddress()) && proto.normalgw.bacnet.DeviceAddress.toObject(includeInstance, f),
    readPropertiesList: jspb.Message.toObjectList(msg.getReadPropertiesList(),
    proto.normalgw.bacnet.ObjectPropertyReference.toObject, includeInstance),
    options: (f = msg.getOptions()) && proto.normalgw.bacnet.OperationOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.normalgw.bacnet.ReadPropMultipleRequest}
 */
proto.normalgw.bacnet.ReadPropMultipleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.normalgw.bacnet.ReadPropMultipleRequest;
  return proto.normalgw.bacnet.ReadPropMultipleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.normalgw.bacnet.ReadPropMultipleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.normalgw.bacnet.ReadPropMultipleRequest}
 */
proto.normalgw.bacnet.ReadPropMultipleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.normalgw.bacnet.DeviceAddress;
      reader.readMessage(value,proto.normalgw.bacnet.DeviceAddress.deserializeBinaryFromReader);
      msg.setDeviceAddress(value);
      break;
    case 2:
      var value = new proto.normalgw.bacnet.ObjectPropertyReference;
      reader.readMessage(value,proto.normalgw.bacnet.ObjectPropertyReference.deserializeBinaryFromReader);
      msg.addReadProperties(value);
      break;
    case 3:
      var value = new proto.normalgw.bacnet.OperationOptions;
      reader.readMessage(value,proto.normalgw.bacnet.OperationOptions.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.ReadPropMultipleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.normalgw.bacnet.ReadPropMultipleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.normalgw.bacnet.ReadPropMultipleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.ReadPropMultipleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceAddress();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.normalgw.bacnet.DeviceAddress.serializeBinaryToWriter
    );
  }
  f = message.getReadPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.normalgw.bacnet.ObjectPropertyReference.serializeBinaryToWriter
    );
  }
  f = message.getOptions();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.normalgw.bacnet.OperationOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional DeviceAddress device_address = 1;
 * @return {?proto.normalgw.bacnet.DeviceAddress}
 */
proto.normalgw.bacnet.ReadPropMultipleRequest.prototype.getDeviceAddress = function() {
  return /** @type{?proto.normalgw.bacnet.DeviceAddress} */ (
    jspb.Message.getWrapperField(this, proto.normalgw.bacnet.DeviceAddress, 1));
};


/**
 * @param {?proto.normalgw.bacnet.DeviceAddress|undefined} value
 * @return {!proto.normalgw.bacnet.ReadPropMultipleRequest} returns this
*/
proto.normalgw.bacnet.ReadPropMultipleRequest.prototype.setDeviceAddress = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.normalgw.bacnet.ReadPropMultipleRequest} returns this
 */
proto.normalgw.bacnet.ReadPropMultipleRequest.prototype.clearDeviceAddress = function() {
  return this.setDeviceAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.ReadPropMultipleRequest.prototype.hasDeviceAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ObjectPropertyReference read_properties = 2;
 * @return {!Array<!proto.normalgw.bacnet.ObjectPropertyReference>}
 */
proto.normalgw.bacnet.ReadPropMultipleRequest.prototype.getReadPropertiesList = function() {
  return /** @type{!Array<!proto.normalgw.bacnet.ObjectPropertyReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.normalgw.bacnet.ObjectPropertyReference, 2));
};


/**
 * @param {!Array<!proto.normalgw.bacnet.ObjectPropertyReference>} value
 * @return {!proto.normalgw.bacnet.ReadPropMultipleRequest} returns this
*/
proto.normalgw.bacnet.ReadPropMultipleRequest.prototype.setReadPropertiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.normalgw.bacnet.ObjectPropertyReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.normalgw.bacnet.ObjectPropertyReference}
 */
proto.normalgw.bacnet.ReadPropMultipleRequest.prototype.addReadProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.normalgw.bacnet.ObjectPropertyReference, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.normalgw.bacnet.ReadPropMultipleRequest} returns this
 */
proto.normalgw.bacnet.ReadPropMultipleRequest.prototype.clearReadPropertiesList = function() {
  return this.setReadPropertiesList([]);
};


/**
 * optional OperationOptions options = 3;
 * @return {?proto.normalgw.bacnet.OperationOptions}
 */
proto.normalgw.bacnet.ReadPropMultipleRequest.prototype.getOptions = function() {
  return /** @type{?proto.normalgw.bacnet.OperationOptions} */ (
    jspb.Message.getWrapperField(this, proto.normalgw.bacnet.OperationOptions, 3));
};


/**
 * @param {?proto.normalgw.bacnet.OperationOptions|undefined} value
 * @return {!proto.normalgw.bacnet.ReadPropMultipleRequest} returns this
*/
proto.normalgw.bacnet.ReadPropMultipleRequest.prototype.setOptions = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.normalgw.bacnet.ReadPropMultipleRequest} returns this
 */
proto.normalgw.bacnet.ReadPropMultipleRequest.prototype.clearOptions = function() {
  return this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.ReadPropMultipleRequest.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.normalgw.bacnet.ReadPropMultipleReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.normalgw.bacnet.ReadPropMultipleReply.prototype.toObject = function(opt_includeInstance) {
  return proto.normalgw.bacnet.ReadPropMultipleReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.normalgw.bacnet.ReadPropMultipleReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.ReadPropMultipleReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.normalgw.bacnet.ReadPropertyReply.toObject, includeInstance),
    error: (f = msg.getError()) && proto.normalgw.bacnet.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.normalgw.bacnet.ReadPropMultipleReply}
 */
proto.normalgw.bacnet.ReadPropMultipleReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.normalgw.bacnet.ReadPropMultipleReply;
  return proto.normalgw.bacnet.ReadPropMultipleReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.normalgw.bacnet.ReadPropMultipleReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.normalgw.bacnet.ReadPropMultipleReply}
 */
proto.normalgw.bacnet.ReadPropMultipleReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.normalgw.bacnet.ReadPropertyReply;
      reader.readMessage(value,proto.normalgw.bacnet.ReadPropertyReply.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    case 2:
      var value = new proto.normalgw.bacnet.Error;
      reader.readMessage(value,proto.normalgw.bacnet.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.ReadPropMultipleReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.normalgw.bacnet.ReadPropMultipleReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.normalgw.bacnet.ReadPropMultipleReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.ReadPropMultipleReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.normalgw.bacnet.ReadPropertyReply.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.normalgw.bacnet.Error.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ReadPropertyReply values = 1;
 * @return {!Array<!proto.normalgw.bacnet.ReadPropertyReply>}
 */
proto.normalgw.bacnet.ReadPropMultipleReply.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.normalgw.bacnet.ReadPropertyReply>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.normalgw.bacnet.ReadPropertyReply, 1));
};


/**
 * @param {!Array<!proto.normalgw.bacnet.ReadPropertyReply>} value
 * @return {!proto.normalgw.bacnet.ReadPropMultipleReply} returns this
*/
proto.normalgw.bacnet.ReadPropMultipleReply.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.normalgw.bacnet.ReadPropertyReply=} opt_value
 * @param {number=} opt_index
 * @return {!proto.normalgw.bacnet.ReadPropertyReply}
 */
proto.normalgw.bacnet.ReadPropMultipleReply.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.normalgw.bacnet.ReadPropertyReply, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.normalgw.bacnet.ReadPropMultipleReply} returns this
 */
proto.normalgw.bacnet.ReadPropMultipleReply.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};


/**
 * optional Error error = 2;
 * @return {?proto.normalgw.bacnet.Error}
 */
proto.normalgw.bacnet.ReadPropMultipleReply.prototype.getError = function() {
  return /** @type{?proto.normalgw.bacnet.Error} */ (
    jspb.Message.getWrapperField(this, proto.normalgw.bacnet.Error, 2));
};


/**
 * @param {?proto.normalgw.bacnet.Error|undefined} value
 * @return {!proto.normalgw.bacnet.ReadPropMultipleReply} returns this
*/
proto.normalgw.bacnet.ReadPropMultipleReply.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.normalgw.bacnet.ReadPropMultipleReply} returns this
 */
proto.normalgw.bacnet.ReadPropMultipleReply.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.ReadPropMultipleReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.normalgw.bacnet.WhoIsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.normalgw.bacnet.WhoIsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.normalgw.bacnet.WhoIsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.WhoIsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    lowLimit: jspb.Message.getFieldWithDefault(msg, 1, 0),
    highLimit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    target: (f = msg.getTarget()) && proto.normalgw.bacnet.DeviceAddress.toObject(includeInstance, f),
    options: (f = msg.getOptions()) && proto.normalgw.bacnet.OperationOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.normalgw.bacnet.WhoIsRequest}
 */
proto.normalgw.bacnet.WhoIsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.normalgw.bacnet.WhoIsRequest;
  return proto.normalgw.bacnet.WhoIsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.normalgw.bacnet.WhoIsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.normalgw.bacnet.WhoIsRequest}
 */
proto.normalgw.bacnet.WhoIsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLowLimit(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHighLimit(value);
      break;
    case 3:
      var value = new proto.normalgw.bacnet.DeviceAddress;
      reader.readMessage(value,proto.normalgw.bacnet.DeviceAddress.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 4:
      var value = new proto.normalgw.bacnet.OperationOptions;
      reader.readMessage(value,proto.normalgw.bacnet.OperationOptions.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.WhoIsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.normalgw.bacnet.WhoIsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.normalgw.bacnet.WhoIsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.WhoIsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLowLimit();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHighLimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.normalgw.bacnet.DeviceAddress.serializeBinaryToWriter
    );
  }
  f = message.getOptions();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.normalgw.bacnet.OperationOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 low_limit = 1;
 * @return {number}
 */
proto.normalgw.bacnet.WhoIsRequest.prototype.getLowLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.WhoIsRequest} returns this
 */
proto.normalgw.bacnet.WhoIsRequest.prototype.setLowLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 high_limit = 2;
 * @return {number}
 */
proto.normalgw.bacnet.WhoIsRequest.prototype.getHighLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.WhoIsRequest} returns this
 */
proto.normalgw.bacnet.WhoIsRequest.prototype.setHighLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional DeviceAddress target = 3;
 * @return {?proto.normalgw.bacnet.DeviceAddress}
 */
proto.normalgw.bacnet.WhoIsRequest.prototype.getTarget = function() {
  return /** @type{?proto.normalgw.bacnet.DeviceAddress} */ (
    jspb.Message.getWrapperField(this, proto.normalgw.bacnet.DeviceAddress, 3));
};


/**
 * @param {?proto.normalgw.bacnet.DeviceAddress|undefined} value
 * @return {!proto.normalgw.bacnet.WhoIsRequest} returns this
*/
proto.normalgw.bacnet.WhoIsRequest.prototype.setTarget = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.normalgw.bacnet.WhoIsRequest} returns this
 */
proto.normalgw.bacnet.WhoIsRequest.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.WhoIsRequest.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional OperationOptions options = 4;
 * @return {?proto.normalgw.bacnet.OperationOptions}
 */
proto.normalgw.bacnet.WhoIsRequest.prototype.getOptions = function() {
  return /** @type{?proto.normalgw.bacnet.OperationOptions} */ (
    jspb.Message.getWrapperField(this, proto.normalgw.bacnet.OperationOptions, 4));
};


/**
 * @param {?proto.normalgw.bacnet.OperationOptions|undefined} value
 * @return {!proto.normalgw.bacnet.WhoIsRequest} returns this
*/
proto.normalgw.bacnet.WhoIsRequest.prototype.setOptions = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.normalgw.bacnet.WhoIsRequest} returns this
 */
proto.normalgw.bacnet.WhoIsRequest.prototype.clearOptions = function() {
  return this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.WhoIsRequest.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.normalgw.bacnet.WhoIsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.normalgw.bacnet.WhoIsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.normalgw.bacnet.WhoIsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.WhoIsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceAddress: (f = msg.getDeviceAddress()) && proto.normalgw.bacnet.DeviceAddress.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.normalgw.bacnet.WhoIsReply}
 */
proto.normalgw.bacnet.WhoIsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.normalgw.bacnet.WhoIsReply;
  return proto.normalgw.bacnet.WhoIsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.normalgw.bacnet.WhoIsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.normalgw.bacnet.WhoIsReply}
 */
proto.normalgw.bacnet.WhoIsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.normalgw.bacnet.DeviceAddress;
      reader.readMessage(value,proto.normalgw.bacnet.DeviceAddress.deserializeBinaryFromReader);
      msg.setDeviceAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.WhoIsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.normalgw.bacnet.WhoIsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.normalgw.bacnet.WhoIsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.WhoIsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceAddress();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.normalgw.bacnet.DeviceAddress.serializeBinaryToWriter
    );
  }
};


/**
 * optional DeviceAddress device_address = 1;
 * @return {?proto.normalgw.bacnet.DeviceAddress}
 */
proto.normalgw.bacnet.WhoIsReply.prototype.getDeviceAddress = function() {
  return /** @type{?proto.normalgw.bacnet.DeviceAddress} */ (
    jspb.Message.getWrapperField(this, proto.normalgw.bacnet.DeviceAddress, 1));
};


/**
 * @param {?proto.normalgw.bacnet.DeviceAddress|undefined} value
 * @return {!proto.normalgw.bacnet.WhoIsReply} returns this
*/
proto.normalgw.bacnet.WhoIsReply.prototype.setDeviceAddress = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.normalgw.bacnet.WhoIsReply} returns this
 */
proto.normalgw.bacnet.WhoIsReply.prototype.clearDeviceAddress = function() {
  return this.setDeviceAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.WhoIsReply.prototype.hasDeviceAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.normalgw.bacnet.WhoIsRouterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.normalgw.bacnet.WhoIsRouterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.normalgw.bacnet.WhoIsRouterRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.WhoIsRouterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    net: jspb.Message.getFieldWithDefault(msg, 1, 0),
    mac: msg.getMac_asB64(),
    options: (f = msg.getOptions()) && proto.normalgw.bacnet.OperationOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.normalgw.bacnet.WhoIsRouterRequest}
 */
proto.normalgw.bacnet.WhoIsRouterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.normalgw.bacnet.WhoIsRouterRequest;
  return proto.normalgw.bacnet.WhoIsRouterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.normalgw.bacnet.WhoIsRouterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.normalgw.bacnet.WhoIsRouterRequest}
 */
proto.normalgw.bacnet.WhoIsRouterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNet(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMac(value);
      break;
    case 3:
      var value = new proto.normalgw.bacnet.OperationOptions;
      reader.readMessage(value,proto.normalgw.bacnet.OperationOptions.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.WhoIsRouterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.normalgw.bacnet.WhoIsRouterRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.normalgw.bacnet.WhoIsRouterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.WhoIsRouterRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNet();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMac_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getOptions();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.normalgw.bacnet.OperationOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 net = 1;
 * @return {number}
 */
proto.normalgw.bacnet.WhoIsRouterRequest.prototype.getNet = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.WhoIsRouterRequest} returns this
 */
proto.normalgw.bacnet.WhoIsRouterRequest.prototype.setNet = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes mac = 2;
 * @return {!(string|Uint8Array)}
 */
proto.normalgw.bacnet.WhoIsRouterRequest.prototype.getMac = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes mac = 2;
 * This is a type-conversion wrapper around `getMac()`
 * @return {string}
 */
proto.normalgw.bacnet.WhoIsRouterRequest.prototype.getMac_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMac()));
};


/**
 * optional bytes mac = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMac()`
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.WhoIsRouterRequest.prototype.getMac_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMac()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.normalgw.bacnet.WhoIsRouterRequest} returns this
 */
proto.normalgw.bacnet.WhoIsRouterRequest.prototype.setMac = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional OperationOptions options = 3;
 * @return {?proto.normalgw.bacnet.OperationOptions}
 */
proto.normalgw.bacnet.WhoIsRouterRequest.prototype.getOptions = function() {
  return /** @type{?proto.normalgw.bacnet.OperationOptions} */ (
    jspb.Message.getWrapperField(this, proto.normalgw.bacnet.OperationOptions, 3));
};


/**
 * @param {?proto.normalgw.bacnet.OperationOptions|undefined} value
 * @return {!proto.normalgw.bacnet.WhoIsRouterRequest} returns this
*/
proto.normalgw.bacnet.WhoIsRouterRequest.prototype.setOptions = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.normalgw.bacnet.WhoIsRouterRequest} returns this
 */
proto.normalgw.bacnet.WhoIsRouterRequest.prototype.clearOptions = function() {
  return this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.WhoIsRouterRequest.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.normalgw.bacnet.WhoIsRouterReply.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.normalgw.bacnet.WhoIsRouterReply.prototype.toObject = function(opt_includeInstance) {
  return proto.normalgw.bacnet.WhoIsRouterReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.normalgw.bacnet.WhoIsRouterReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.WhoIsRouterReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    mac: msg.getMac_asB64(),
    netsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.normalgw.bacnet.WhoIsRouterReply}
 */
proto.normalgw.bacnet.WhoIsRouterReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.normalgw.bacnet.WhoIsRouterReply;
  return proto.normalgw.bacnet.WhoIsRouterReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.normalgw.bacnet.WhoIsRouterReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.normalgw.bacnet.WhoIsRouterReply}
 */
proto.normalgw.bacnet.WhoIsRouterReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMac(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setNetsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.WhoIsRouterReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.normalgw.bacnet.WhoIsRouterReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.normalgw.bacnet.WhoIsRouterReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.WhoIsRouterReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMac_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getNetsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
};


/**
 * optional bytes mac = 1;
 * @return {!(string|Uint8Array)}
 */
proto.normalgw.bacnet.WhoIsRouterReply.prototype.getMac = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes mac = 1;
 * This is a type-conversion wrapper around `getMac()`
 * @return {string}
 */
proto.normalgw.bacnet.WhoIsRouterReply.prototype.getMac_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMac()));
};


/**
 * optional bytes mac = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMac()`
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.WhoIsRouterReply.prototype.getMac_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMac()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.normalgw.bacnet.WhoIsRouterReply} returns this
 */
proto.normalgw.bacnet.WhoIsRouterReply.prototype.setMac = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated uint32 nets = 2;
 * @return {!Array<number>}
 */
proto.normalgw.bacnet.WhoIsRouterReply.prototype.getNetsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.normalgw.bacnet.WhoIsRouterReply} returns this
 */
proto.normalgw.bacnet.WhoIsRouterReply.prototype.setNetsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.normalgw.bacnet.WhoIsRouterReply} returns this
 */
proto.normalgw.bacnet.WhoIsRouterReply.prototype.addNets = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.normalgw.bacnet.WhoIsRouterReply} returns this
 */
proto.normalgw.bacnet.WhoIsRouterReply.prototype.clearNetsList = function() {
  return this.setNetsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.normalgw.bacnet.ReadFileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.normalgw.bacnet.ReadFileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.normalgw.bacnet.ReadFileRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.ReadFileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceAddress: (f = msg.getDeviceAddress()) && proto.normalgw.bacnet.DeviceAddress.toObject(includeInstance, f),
    objectId: (f = msg.getObjectId()) && proto.normalgw.bacnet.ObjectId.toObject(includeInstance, f),
    offset: jspb.Message.getFieldWithDefault(msg, 3, 0),
    length: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.normalgw.bacnet.ReadFileRequest}
 */
proto.normalgw.bacnet.ReadFileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.normalgw.bacnet.ReadFileRequest;
  return proto.normalgw.bacnet.ReadFileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.normalgw.bacnet.ReadFileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.normalgw.bacnet.ReadFileRequest}
 */
proto.normalgw.bacnet.ReadFileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.normalgw.bacnet.DeviceAddress;
      reader.readMessage(value,proto.normalgw.bacnet.DeviceAddress.deserializeBinaryFromReader);
      msg.setDeviceAddress(value);
      break;
    case 2:
      var value = new proto.normalgw.bacnet.ObjectId;
      reader.readMessage(value,proto.normalgw.bacnet.ObjectId.deserializeBinaryFromReader);
      msg.setObjectId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.ReadFileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.normalgw.bacnet.ReadFileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.normalgw.bacnet.ReadFileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.ReadFileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceAddress();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.normalgw.bacnet.DeviceAddress.serializeBinaryToWriter
    );
  }
  f = message.getObjectId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.normalgw.bacnet.ObjectId.serializeBinaryToWriter
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getLength();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional DeviceAddress device_address = 1;
 * @return {?proto.normalgw.bacnet.DeviceAddress}
 */
proto.normalgw.bacnet.ReadFileRequest.prototype.getDeviceAddress = function() {
  return /** @type{?proto.normalgw.bacnet.DeviceAddress} */ (
    jspb.Message.getWrapperField(this, proto.normalgw.bacnet.DeviceAddress, 1));
};


/**
 * @param {?proto.normalgw.bacnet.DeviceAddress|undefined} value
 * @return {!proto.normalgw.bacnet.ReadFileRequest} returns this
*/
proto.normalgw.bacnet.ReadFileRequest.prototype.setDeviceAddress = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.normalgw.bacnet.ReadFileRequest} returns this
 */
proto.normalgw.bacnet.ReadFileRequest.prototype.clearDeviceAddress = function() {
  return this.setDeviceAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.ReadFileRequest.prototype.hasDeviceAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ObjectId object_id = 2;
 * @return {?proto.normalgw.bacnet.ObjectId}
 */
proto.normalgw.bacnet.ReadFileRequest.prototype.getObjectId = function() {
  return /** @type{?proto.normalgw.bacnet.ObjectId} */ (
    jspb.Message.getWrapperField(this, proto.normalgw.bacnet.ObjectId, 2));
};


/**
 * @param {?proto.normalgw.bacnet.ObjectId|undefined} value
 * @return {!proto.normalgw.bacnet.ReadFileRequest} returns this
*/
proto.normalgw.bacnet.ReadFileRequest.prototype.setObjectId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.normalgw.bacnet.ReadFileRequest} returns this
 */
proto.normalgw.bacnet.ReadFileRequest.prototype.clearObjectId = function() {
  return this.setObjectId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.ReadFileRequest.prototype.hasObjectId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 offset = 3;
 * @return {number}
 */
proto.normalgw.bacnet.ReadFileRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.ReadFileRequest} returns this
 */
proto.normalgw.bacnet.ReadFileRequest.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 length = 4;
 * @return {number}
 */
proto.normalgw.bacnet.ReadFileRequest.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.ReadFileRequest} returns this
 */
proto.normalgw.bacnet.ReadFileRequest.prototype.setLength = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.normalgw.bacnet.ReadFileReply.prototype.toObject = function(opt_includeInstance) {
  return proto.normalgw.bacnet.ReadFileReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.normalgw.bacnet.ReadFileReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.ReadFileReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    error: (f = msg.getError()) && proto.normalgw.bacnet.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.normalgw.bacnet.ReadFileReply}
 */
proto.normalgw.bacnet.ReadFileReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.normalgw.bacnet.ReadFileReply;
  return proto.normalgw.bacnet.ReadFileReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.normalgw.bacnet.ReadFileReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.normalgw.bacnet.ReadFileReply}
 */
proto.normalgw.bacnet.ReadFileReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 2:
      var value = new proto.normalgw.bacnet.Error;
      reader.readMessage(value,proto.normalgw.bacnet.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.ReadFileReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.normalgw.bacnet.ReadFileReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.normalgw.bacnet.ReadFileReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.ReadFileReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.normalgw.bacnet.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.normalgw.bacnet.ReadFileReply.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.normalgw.bacnet.ReadFileReply.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.ReadFileReply.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.normalgw.bacnet.ReadFileReply} returns this
 */
proto.normalgw.bacnet.ReadFileReply.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.normalgw.bacnet.Error}
 */
proto.normalgw.bacnet.ReadFileReply.prototype.getError = function() {
  return /** @type{?proto.normalgw.bacnet.Error} */ (
    jspb.Message.getWrapperField(this, proto.normalgw.bacnet.Error, 2));
};


/**
 * @param {?proto.normalgw.bacnet.Error|undefined} value
 * @return {!proto.normalgw.bacnet.ReadFileReply} returns this
*/
proto.normalgw.bacnet.ReadFileReply.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.normalgw.bacnet.ReadFileReply} returns this
 */
proto.normalgw.bacnet.ReadFileReply.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.ReadFileReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.normalgw.bacnet.RegisterWithBbmdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.normalgw.bacnet.RegisterWithBbmdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.normalgw.bacnet.RegisterWithBbmdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.RegisterWithBbmdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    mac: msg.getMac_asB64(),
    ttl: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.normalgw.bacnet.RegisterWithBbmdRequest}
 */
proto.normalgw.bacnet.RegisterWithBbmdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.normalgw.bacnet.RegisterWithBbmdRequest;
  return proto.normalgw.bacnet.RegisterWithBbmdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.normalgw.bacnet.RegisterWithBbmdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.normalgw.bacnet.RegisterWithBbmdRequest}
 */
proto.normalgw.bacnet.RegisterWithBbmdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMac(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTtl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.RegisterWithBbmdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.normalgw.bacnet.RegisterWithBbmdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.normalgw.bacnet.RegisterWithBbmdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.RegisterWithBbmdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMac_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTtl();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bytes Mac = 1;
 * @return {!(string|Uint8Array)}
 */
proto.normalgw.bacnet.RegisterWithBbmdRequest.prototype.getMac = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Mac = 1;
 * This is a type-conversion wrapper around `getMac()`
 * @return {string}
 */
proto.normalgw.bacnet.RegisterWithBbmdRequest.prototype.getMac_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMac()));
};


/**
 * optional bytes Mac = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMac()`
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.RegisterWithBbmdRequest.prototype.getMac_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMac()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.normalgw.bacnet.RegisterWithBbmdRequest} returns this
 */
proto.normalgw.bacnet.RegisterWithBbmdRequest.prototype.setMac = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 Ttl = 2;
 * @return {number}
 */
proto.normalgw.bacnet.RegisterWithBbmdRequest.prototype.getTtl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.RegisterWithBbmdRequest} returns this
 */
proto.normalgw.bacnet.RegisterWithBbmdRequest.prototype.setTtl = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.normalgw.bacnet.RegisterWithBbmdReply.prototype.toObject = function(opt_includeInstance) {
  return proto.normalgw.bacnet.RegisterWithBbmdReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.normalgw.bacnet.RegisterWithBbmdReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.RegisterWithBbmdReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.normalgw.bacnet.RegisterWithBbmdReply}
 */
proto.normalgw.bacnet.RegisterWithBbmdReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.normalgw.bacnet.RegisterWithBbmdReply;
  return proto.normalgw.bacnet.RegisterWithBbmdReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.normalgw.bacnet.RegisterWithBbmdReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.normalgw.bacnet.RegisterWithBbmdReply}
 */
proto.normalgw.bacnet.RegisterWithBbmdReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.RegisterWithBbmdReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.normalgw.bacnet.RegisterWithBbmdReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.normalgw.bacnet.RegisterWithBbmdReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.RegisterWithBbmdReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.normalgw.bacnet.WritePropertyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.normalgw.bacnet.WritePropertyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.normalgw.bacnet.WritePropertyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.WritePropertyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceAddress: (f = msg.getDeviceAddress()) && proto.normalgw.bacnet.DeviceAddress.toObject(includeInstance, f),
    property: (f = msg.getProperty()) && proto.normalgw.bacnet.ObjectPropertyReference.toObject(includeInstance, f),
    value: (f = msg.getValue()) && proto.normalgw.bacnet.ApplicationDataValue.toObject(includeInstance, f),
    priority: jspb.Message.getFieldWithDefault(msg, 4, 0),
    options: (f = msg.getOptions()) && proto.normalgw.bacnet.OperationOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.normalgw.bacnet.WritePropertyRequest}
 */
proto.normalgw.bacnet.WritePropertyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.normalgw.bacnet.WritePropertyRequest;
  return proto.normalgw.bacnet.WritePropertyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.normalgw.bacnet.WritePropertyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.normalgw.bacnet.WritePropertyRequest}
 */
proto.normalgw.bacnet.WritePropertyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.normalgw.bacnet.DeviceAddress;
      reader.readMessage(value,proto.normalgw.bacnet.DeviceAddress.deserializeBinaryFromReader);
      msg.setDeviceAddress(value);
      break;
    case 2:
      var value = new proto.normalgw.bacnet.ObjectPropertyReference;
      reader.readMessage(value,proto.normalgw.bacnet.ObjectPropertyReference.deserializeBinaryFromReader);
      msg.setProperty(value);
      break;
    case 3:
      var value = new proto.normalgw.bacnet.ApplicationDataValue;
      reader.readMessage(value,proto.normalgw.bacnet.ApplicationDataValue.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPriority(value);
      break;
    case 5:
      var value = new proto.normalgw.bacnet.OperationOptions;
      reader.readMessage(value,proto.normalgw.bacnet.OperationOptions.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.WritePropertyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.normalgw.bacnet.WritePropertyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.normalgw.bacnet.WritePropertyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.WritePropertyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceAddress();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.normalgw.bacnet.DeviceAddress.serializeBinaryToWriter
    );
  }
  f = message.getProperty();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.normalgw.bacnet.ObjectPropertyReference.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.normalgw.bacnet.ApplicationDataValue.serializeBinaryToWriter
    );
  }
  f = message.getPriority();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getOptions();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.normalgw.bacnet.OperationOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional DeviceAddress device_address = 1;
 * @return {?proto.normalgw.bacnet.DeviceAddress}
 */
proto.normalgw.bacnet.WritePropertyRequest.prototype.getDeviceAddress = function() {
  return /** @type{?proto.normalgw.bacnet.DeviceAddress} */ (
    jspb.Message.getWrapperField(this, proto.normalgw.bacnet.DeviceAddress, 1));
};


/**
 * @param {?proto.normalgw.bacnet.DeviceAddress|undefined} value
 * @return {!proto.normalgw.bacnet.WritePropertyRequest} returns this
*/
proto.normalgw.bacnet.WritePropertyRequest.prototype.setDeviceAddress = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.normalgw.bacnet.WritePropertyRequest} returns this
 */
proto.normalgw.bacnet.WritePropertyRequest.prototype.clearDeviceAddress = function() {
  return this.setDeviceAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.WritePropertyRequest.prototype.hasDeviceAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ObjectPropertyReference property = 2;
 * @return {?proto.normalgw.bacnet.ObjectPropertyReference}
 */
proto.normalgw.bacnet.WritePropertyRequest.prototype.getProperty = function() {
  return /** @type{?proto.normalgw.bacnet.ObjectPropertyReference} */ (
    jspb.Message.getWrapperField(this, proto.normalgw.bacnet.ObjectPropertyReference, 2));
};


/**
 * @param {?proto.normalgw.bacnet.ObjectPropertyReference|undefined} value
 * @return {!proto.normalgw.bacnet.WritePropertyRequest} returns this
*/
proto.normalgw.bacnet.WritePropertyRequest.prototype.setProperty = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.normalgw.bacnet.WritePropertyRequest} returns this
 */
proto.normalgw.bacnet.WritePropertyRequest.prototype.clearProperty = function() {
  return this.setProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.WritePropertyRequest.prototype.hasProperty = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ApplicationDataValue value = 3;
 * @return {?proto.normalgw.bacnet.ApplicationDataValue}
 */
proto.normalgw.bacnet.WritePropertyRequest.prototype.getValue = function() {
  return /** @type{?proto.normalgw.bacnet.ApplicationDataValue} */ (
    jspb.Message.getWrapperField(this, proto.normalgw.bacnet.ApplicationDataValue, 3));
};


/**
 * @param {?proto.normalgw.bacnet.ApplicationDataValue|undefined} value
 * @return {!proto.normalgw.bacnet.WritePropertyRequest} returns this
*/
proto.normalgw.bacnet.WritePropertyRequest.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.normalgw.bacnet.WritePropertyRequest} returns this
 */
proto.normalgw.bacnet.WritePropertyRequest.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.WritePropertyRequest.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 priority = 4;
 * @return {number}
 */
proto.normalgw.bacnet.WritePropertyRequest.prototype.getPriority = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.WritePropertyRequest} returns this
 */
proto.normalgw.bacnet.WritePropertyRequest.prototype.setPriority = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional OperationOptions options = 5;
 * @return {?proto.normalgw.bacnet.OperationOptions}
 */
proto.normalgw.bacnet.WritePropertyRequest.prototype.getOptions = function() {
  return /** @type{?proto.normalgw.bacnet.OperationOptions} */ (
    jspb.Message.getWrapperField(this, proto.normalgw.bacnet.OperationOptions, 5));
};


/**
 * @param {?proto.normalgw.bacnet.OperationOptions|undefined} value
 * @return {!proto.normalgw.bacnet.WritePropertyRequest} returns this
*/
proto.normalgw.bacnet.WritePropertyRequest.prototype.setOptions = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.normalgw.bacnet.WritePropertyRequest} returns this
 */
proto.normalgw.bacnet.WritePropertyRequest.prototype.clearOptions = function() {
  return this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.WritePropertyRequest.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.normalgw.bacnet.WritePropertyReply.prototype.toObject = function(opt_includeInstance) {
  return proto.normalgw.bacnet.WritePropertyReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.normalgw.bacnet.WritePropertyReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.WritePropertyReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.normalgw.bacnet.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.normalgw.bacnet.WritePropertyReply}
 */
proto.normalgw.bacnet.WritePropertyReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.normalgw.bacnet.WritePropertyReply;
  return proto.normalgw.bacnet.WritePropertyReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.normalgw.bacnet.WritePropertyReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.normalgw.bacnet.WritePropertyReply}
 */
proto.normalgw.bacnet.WritePropertyReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.normalgw.bacnet.Error;
      reader.readMessage(value,proto.normalgw.bacnet.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.WritePropertyReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.normalgw.bacnet.WritePropertyReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.normalgw.bacnet.WritePropertyReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.WritePropertyReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.normalgw.bacnet.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional Error error = 1;
 * @return {?proto.normalgw.bacnet.Error}
 */
proto.normalgw.bacnet.WritePropertyReply.prototype.getError = function() {
  return /** @type{?proto.normalgw.bacnet.Error} */ (
    jspb.Message.getWrapperField(this, proto.normalgw.bacnet.Error, 1));
};


/**
 * @param {?proto.normalgw.bacnet.Error|undefined} value
 * @return {!proto.normalgw.bacnet.WritePropertyReply} returns this
*/
proto.normalgw.bacnet.WritePropertyReply.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.normalgw.bacnet.WritePropertyReply} returns this
 */
proto.normalgw.bacnet.WritePropertyReply.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.WritePropertyReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.normalgw.bacnet.ApplicationDataValue.repeatedFields_ = [16];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.normalgw.bacnet.ApplicationDataValue.oneofGroups_ = [[1,2,3,4,5,6,7,8,10,13]];

/**
 * @enum {number}
 */
proto.normalgw.bacnet.ApplicationDataValue.ValueCase = {
  VALUE_NOT_SET: 0,
  NULL: 1,
  BOOLEAN: 2,
  UNSIGNED: 3,
  SIGNED: 4,
  REAL: 5,
  DOUBLE: 6,
  OCTET_STRING: 7,
  CHARACTER_STRING: 8,
  ENUMERATED: 10,
  OBJECT_ID: 13
};

/**
 * @return {proto.normalgw.bacnet.ApplicationDataValue.ValueCase}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.getValueCase = function() {
  return /** @type {proto.normalgw.bacnet.ApplicationDataValue.ValueCase} */(jspb.Message.computeOneofCase(this, proto.normalgw.bacnet.ApplicationDataValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.toObject = function(opt_includeInstance) {
  return proto.normalgw.bacnet.ApplicationDataValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.normalgw.bacnet.ApplicationDataValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.ApplicationDataValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_null: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    pb_boolean: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    unsigned: jspb.Message.getFieldWithDefault(msg, 3, 0),
    signed: jspb.Message.getFieldWithDefault(msg, 4, 0),
    real: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    pb_double: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    octetString: msg.getOctetString_asB64(),
    characterString: jspb.Message.getFieldWithDefault(msg, 8, ""),
    enumerated: jspb.Message.getFieldWithDefault(msg, 10, 0),
    objectId: (f = msg.getObjectId()) && proto.normalgw.bacnet.ObjectId.toObject(includeInstance, f),
    arrayList: jspb.Message.toObjectList(msg.getArrayList(),
    proto.normalgw.bacnet.ApplicationDataValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.normalgw.bacnet.ApplicationDataValue}
 */
proto.normalgw.bacnet.ApplicationDataValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.normalgw.bacnet.ApplicationDataValue;
  return proto.normalgw.bacnet.ApplicationDataValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.normalgw.bacnet.ApplicationDataValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.normalgw.bacnet.ApplicationDataValue}
 */
proto.normalgw.bacnet.ApplicationDataValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNull(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolean(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUnsigned(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSigned(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setReal(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDouble(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOctetString(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCharacterString(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEnumerated(value);
      break;
    case 13:
      var value = new proto.normalgw.bacnet.ObjectId;
      reader.readMessage(value,proto.normalgw.bacnet.ObjectId.deserializeBinaryFromReader);
      msg.setObjectId(value);
      break;
    case 16:
      var value = new proto.normalgw.bacnet.ApplicationDataValue;
      reader.readMessage(value,proto.normalgw.bacnet.ApplicationDataValue.deserializeBinaryFromReader);
      msg.addArray(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.normalgw.bacnet.ApplicationDataValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.normalgw.bacnet.ApplicationDataValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.ApplicationDataValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getObjectId();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.normalgw.bacnet.ObjectId.serializeBinaryToWriter
    );
  }
  f = message.getArrayList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.normalgw.bacnet.ApplicationDataValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool null = 1;
 * @return {boolean}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.getNull = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.normalgw.bacnet.ApplicationDataValue} returns this
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.setNull = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.normalgw.bacnet.ApplicationDataValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.normalgw.bacnet.ApplicationDataValue} returns this
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.clearNull = function() {
  return jspb.Message.setOneofField(this, 1, proto.normalgw.bacnet.ApplicationDataValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.hasNull = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool boolean = 2;
 * @return {boolean}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.getBoolean = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.normalgw.bacnet.ApplicationDataValue} returns this
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.setBoolean = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.normalgw.bacnet.ApplicationDataValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.normalgw.bacnet.ApplicationDataValue} returns this
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.clearBoolean = function() {
  return jspb.Message.setOneofField(this, 2, proto.normalgw.bacnet.ApplicationDataValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.hasBoolean = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 unsigned = 3;
 * @return {number}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.getUnsigned = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.ApplicationDataValue} returns this
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.setUnsigned = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.normalgw.bacnet.ApplicationDataValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.normalgw.bacnet.ApplicationDataValue} returns this
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.clearUnsigned = function() {
  return jspb.Message.setOneofField(this, 3, proto.normalgw.bacnet.ApplicationDataValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.hasUnsigned = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 signed = 4;
 * @return {number}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.getSigned = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.ApplicationDataValue} returns this
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.setSigned = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.normalgw.bacnet.ApplicationDataValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.normalgw.bacnet.ApplicationDataValue} returns this
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.clearSigned = function() {
  return jspb.Message.setOneofField(this, 4, proto.normalgw.bacnet.ApplicationDataValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.hasSigned = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float real = 5;
 * @return {number}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.getReal = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.ApplicationDataValue} returns this
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.setReal = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.normalgw.bacnet.ApplicationDataValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.normalgw.bacnet.ApplicationDataValue} returns this
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.clearReal = function() {
  return jspb.Message.setOneofField(this, 5, proto.normalgw.bacnet.ApplicationDataValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.hasReal = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double double = 6;
 * @return {number}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.getDouble = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.ApplicationDataValue} returns this
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.setDouble = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.normalgw.bacnet.ApplicationDataValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.normalgw.bacnet.ApplicationDataValue} returns this
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.clearDouble = function() {
  return jspb.Message.setOneofField(this, 6, proto.normalgw.bacnet.ApplicationDataValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.hasDouble = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bytes octet_string = 7;
 * @return {!(string|Uint8Array)}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.getOctetString = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes octet_string = 7;
 * This is a type-conversion wrapper around `getOctetString()`
 * @return {string}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.getOctetString_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOctetString()));
};


/**
 * optional bytes octet_string = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOctetString()`
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.getOctetString_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOctetString()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.normalgw.bacnet.ApplicationDataValue} returns this
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.setOctetString = function(value) {
  return jspb.Message.setOneofField(this, 7, proto.normalgw.bacnet.ApplicationDataValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.normalgw.bacnet.ApplicationDataValue} returns this
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.clearOctetString = function() {
  return jspb.Message.setOneofField(this, 7, proto.normalgw.bacnet.ApplicationDataValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.hasOctetString = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string character_string = 8;
 * @return {string}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.getCharacterString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.normalgw.bacnet.ApplicationDataValue} returns this
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.setCharacterString = function(value) {
  return jspb.Message.setOneofField(this, 8, proto.normalgw.bacnet.ApplicationDataValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.normalgw.bacnet.ApplicationDataValue} returns this
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.clearCharacterString = function() {
  return jspb.Message.setOneofField(this, 8, proto.normalgw.bacnet.ApplicationDataValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.hasCharacterString = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 enumerated = 10;
 * @return {number}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.getEnumerated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.ApplicationDataValue} returns this
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.setEnumerated = function(value) {
  return jspb.Message.setOneofField(this, 10, proto.normalgw.bacnet.ApplicationDataValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.normalgw.bacnet.ApplicationDataValue} returns this
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.clearEnumerated = function() {
  return jspb.Message.setOneofField(this, 10, proto.normalgw.bacnet.ApplicationDataValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.hasEnumerated = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ObjectId object_id = 13;
 * @return {?proto.normalgw.bacnet.ObjectId}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.getObjectId = function() {
  return /** @type{?proto.normalgw.bacnet.ObjectId} */ (
    jspb.Message.getWrapperField(this, proto.normalgw.bacnet.ObjectId, 13));
};


/**
 * @param {?proto.normalgw.bacnet.ObjectId|undefined} value
 * @return {!proto.normalgw.bacnet.ApplicationDataValue} returns this
*/
proto.normalgw.bacnet.ApplicationDataValue.prototype.setObjectId = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.normalgw.bacnet.ApplicationDataValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.normalgw.bacnet.ApplicationDataValue} returns this
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.clearObjectId = function() {
  return this.setObjectId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.hasObjectId = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * repeated ApplicationDataValue array = 16;
 * @return {!Array<!proto.normalgw.bacnet.ApplicationDataValue>}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.getArrayList = function() {
  return /** @type{!Array<!proto.normalgw.bacnet.ApplicationDataValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.normalgw.bacnet.ApplicationDataValue, 16));
};


/**
 * @param {!Array<!proto.normalgw.bacnet.ApplicationDataValue>} value
 * @return {!proto.normalgw.bacnet.ApplicationDataValue} returns this
*/
proto.normalgw.bacnet.ApplicationDataValue.prototype.setArrayList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.normalgw.bacnet.ApplicationDataValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.normalgw.bacnet.ApplicationDataValue}
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.addArray = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.normalgw.bacnet.ApplicationDataValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.normalgw.bacnet.ApplicationDataValue} returns this
 */
proto.normalgw.bacnet.ApplicationDataValue.prototype.clearArrayList = function() {
  return this.setArrayList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.normalgw.bacnet.ObjectPropertyReference.prototype.toObject = function(opt_includeInstance) {
  return proto.normalgw.bacnet.ObjectPropertyReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.normalgw.bacnet.ObjectPropertyReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.ObjectPropertyReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectId: (f = msg.getObjectId()) && proto.normalgw.bacnet.ObjectId.toObject(includeInstance, f),
    propertyId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    arrayIndex: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.normalgw.bacnet.ObjectPropertyReference}
 */
proto.normalgw.bacnet.ObjectPropertyReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.normalgw.bacnet.ObjectPropertyReference;
  return proto.normalgw.bacnet.ObjectPropertyReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.normalgw.bacnet.ObjectPropertyReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.normalgw.bacnet.ObjectPropertyReference}
 */
proto.normalgw.bacnet.ObjectPropertyReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.normalgw.bacnet.ObjectId;
      reader.readMessage(value,proto.normalgw.bacnet.ObjectId.deserializeBinaryFromReader);
      msg.setObjectId(value);
      break;
    case 2:
      var value = /** @type {!proto.normalgw.bacnet.PropertyId} */ (reader.readEnum());
      msg.setPropertyId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setArrayIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.ObjectPropertyReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.normalgw.bacnet.ObjectPropertyReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.normalgw.bacnet.ObjectPropertyReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.ObjectPropertyReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.normalgw.bacnet.ObjectId.serializeBinaryToWriter
    );
  }
  f = message.getPropertyId();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getArrayIndex();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional ObjectId object_id = 1;
 * @return {?proto.normalgw.bacnet.ObjectId}
 */
proto.normalgw.bacnet.ObjectPropertyReference.prototype.getObjectId = function() {
  return /** @type{?proto.normalgw.bacnet.ObjectId} */ (
    jspb.Message.getWrapperField(this, proto.normalgw.bacnet.ObjectId, 1));
};


/**
 * @param {?proto.normalgw.bacnet.ObjectId|undefined} value
 * @return {!proto.normalgw.bacnet.ObjectPropertyReference} returns this
*/
proto.normalgw.bacnet.ObjectPropertyReference.prototype.setObjectId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.normalgw.bacnet.ObjectPropertyReference} returns this
 */
proto.normalgw.bacnet.ObjectPropertyReference.prototype.clearObjectId = function() {
  return this.setObjectId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.ObjectPropertyReference.prototype.hasObjectId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PropertyId property_id = 2;
 * @return {!proto.normalgw.bacnet.PropertyId}
 */
proto.normalgw.bacnet.ObjectPropertyReference.prototype.getPropertyId = function() {
  return /** @type {!proto.normalgw.bacnet.PropertyId} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.normalgw.bacnet.PropertyId} value
 * @return {!proto.normalgw.bacnet.ObjectPropertyReference} returns this
 */
proto.normalgw.bacnet.ObjectPropertyReference.prototype.setPropertyId = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 array_index = 3;
 * @return {number}
 */
proto.normalgw.bacnet.ObjectPropertyReference.prototype.getArrayIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.ObjectPropertyReference} returns this
 */
proto.normalgw.bacnet.ObjectPropertyReference.prototype.setArrayIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.normalgw.bacnet.Error.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.normalgw.bacnet.Error.ErrorTypeCase = {
  ERROR_TYPE_NOT_SET: 0,
  ERROR_CLASS: 1,
  REJECT_REASON: 2,
  ABORT_REASON: 3
};

/**
 * @return {proto.normalgw.bacnet.Error.ErrorTypeCase}
 */
proto.normalgw.bacnet.Error.prototype.getErrorTypeCase = function() {
  return /** @type {proto.normalgw.bacnet.Error.ErrorTypeCase} */(jspb.Message.computeOneofCase(this, proto.normalgw.bacnet.Error.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.normalgw.bacnet.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.normalgw.bacnet.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.normalgw.bacnet.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorClass: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rejectReason: jspb.Message.getFieldWithDefault(msg, 2, 0),
    abortReason: jspb.Message.getFieldWithDefault(msg, 3, 0),
    errorCode: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.normalgw.bacnet.Error}
 */
proto.normalgw.bacnet.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.normalgw.bacnet.Error;
  return proto.normalgw.bacnet.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.normalgw.bacnet.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.normalgw.bacnet.Error}
 */
proto.normalgw.bacnet.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.normalgw.bacnet.ErrorClass} */ (reader.readEnum());
      msg.setErrorClass(value);
      break;
    case 2:
      var value = /** @type {!proto.normalgw.bacnet.RejectReason} */ (reader.readEnum());
      msg.setRejectReason(value);
      break;
    case 3:
      var value = /** @type {!proto.normalgw.bacnet.AbortReason} */ (reader.readEnum());
      msg.setAbortReason(value);
      break;
    case 4:
      var value = /** @type {!proto.normalgw.bacnet.ErrorCode} */ (reader.readEnum());
      msg.setErrorCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.normalgw.bacnet.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.normalgw.bacnet.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.normalgw.bacnet.ErrorClass} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {!proto.normalgw.bacnet.RejectReason} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {!proto.normalgw.bacnet.AbortReason} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getErrorCode();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional ErrorClass error_class = 1;
 * @return {!proto.normalgw.bacnet.ErrorClass}
 */
proto.normalgw.bacnet.Error.prototype.getErrorClass = function() {
  return /** @type {!proto.normalgw.bacnet.ErrorClass} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.normalgw.bacnet.ErrorClass} value
 * @return {!proto.normalgw.bacnet.Error} returns this
 */
proto.normalgw.bacnet.Error.prototype.setErrorClass = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.normalgw.bacnet.Error.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.normalgw.bacnet.Error} returns this
 */
proto.normalgw.bacnet.Error.prototype.clearErrorClass = function() {
  return jspb.Message.setOneofField(this, 1, proto.normalgw.bacnet.Error.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.Error.prototype.hasErrorClass = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RejectReason reject_reason = 2;
 * @return {!proto.normalgw.bacnet.RejectReason}
 */
proto.normalgw.bacnet.Error.prototype.getRejectReason = function() {
  return /** @type {!proto.normalgw.bacnet.RejectReason} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.normalgw.bacnet.RejectReason} value
 * @return {!proto.normalgw.bacnet.Error} returns this
 */
proto.normalgw.bacnet.Error.prototype.setRejectReason = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.normalgw.bacnet.Error.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.normalgw.bacnet.Error} returns this
 */
proto.normalgw.bacnet.Error.prototype.clearRejectReason = function() {
  return jspb.Message.setOneofField(this, 2, proto.normalgw.bacnet.Error.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.Error.prototype.hasRejectReason = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AbortReason abort_reason = 3;
 * @return {!proto.normalgw.bacnet.AbortReason}
 */
proto.normalgw.bacnet.Error.prototype.getAbortReason = function() {
  return /** @type {!proto.normalgw.bacnet.AbortReason} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.normalgw.bacnet.AbortReason} value
 * @return {!proto.normalgw.bacnet.Error} returns this
 */
proto.normalgw.bacnet.Error.prototype.setAbortReason = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.normalgw.bacnet.Error.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.normalgw.bacnet.Error} returns this
 */
proto.normalgw.bacnet.Error.prototype.clearAbortReason = function() {
  return jspb.Message.setOneofField(this, 3, proto.normalgw.bacnet.Error.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.normalgw.bacnet.Error.prototype.hasAbortReason = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ErrorCode error_code = 4;
 * @return {!proto.normalgw.bacnet.ErrorCode}
 */
proto.normalgw.bacnet.Error.prototype.getErrorCode = function() {
  return /** @type {!proto.normalgw.bacnet.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.normalgw.bacnet.ErrorCode} value
 * @return {!proto.normalgw.bacnet.Error} returns this
 */
proto.normalgw.bacnet.Error.prototype.setErrorCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.normalgw.bacnet.GetConfigurationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.normalgw.bacnet.GetConfigurationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.normalgw.bacnet.GetConfigurationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.GetConfigurationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.normalgw.bacnet.GetConfigurationRequest}
 */
proto.normalgw.bacnet.GetConfigurationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.normalgw.bacnet.GetConfigurationRequest;
  return proto.normalgw.bacnet.GetConfigurationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.normalgw.bacnet.GetConfigurationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.normalgw.bacnet.GetConfigurationRequest}
 */
proto.normalgw.bacnet.GetConfigurationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.GetConfigurationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.normalgw.bacnet.GetConfigurationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.normalgw.bacnet.GetConfigurationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.GetConfigurationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.normalgw.bacnet.GetConfigurationReply.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.toObject = function(opt_includeInstance) {
  return proto.normalgw.bacnet.GetConfigurationReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.normalgw.bacnet.GetConfigurationReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.GetConfigurationReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    localIfname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    localIfAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    localBcastAddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    availableInterfacesList: jspb.Message.toObjectList(msg.getAvailableInterfacesList(),
    proto.normalgw.bacnet.GetConfigurationReply.Interface.toObject, includeInstance),
    port: jspb.Message.getFieldWithDefault(msg, 5, 0),
    bbmdAddress: jspb.Message.getFieldWithDefault(msg, 6, ""),
    bbmdPort: jspb.Message.getFieldWithDefault(msg, 7, 0),
    bbmdTtl: jspb.Message.getFieldWithDefault(msg, 8, 0),
    bbmdStatus: jspb.Message.getFieldWithDefault(msg, 9, 0),
    deviceInstance: jspb.Message.getFieldWithDefault(msg, 10, 0),
    deviceName: jspb.Message.getFieldWithDefault(msg, 11, ""),
    debug: jspb.Message.getBooleanFieldWithDefault(msg, 12, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.normalgw.bacnet.GetConfigurationReply}
 */
proto.normalgw.bacnet.GetConfigurationReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.normalgw.bacnet.GetConfigurationReply;
  return proto.normalgw.bacnet.GetConfigurationReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.normalgw.bacnet.GetConfigurationReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.normalgw.bacnet.GetConfigurationReply}
 */
proto.normalgw.bacnet.GetConfigurationReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalIfname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalIfAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalBcastAddress(value);
      break;
    case 4:
      var value = new proto.normalgw.bacnet.GetConfigurationReply.Interface;
      reader.readMessage(value,proto.normalgw.bacnet.GetConfigurationReply.Interface.deserializeBinaryFromReader);
      msg.addAvailableInterfaces(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setBbmdAddress(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBbmdPort(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBbmdTtl(value);
      break;
    case 9:
      var value = /** @type {!proto.normalgw.bacnet.GetConfigurationReply.BBMDStatus} */ (reader.readEnum());
      msg.setBbmdStatus(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceInstance(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceName(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebug(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.normalgw.bacnet.GetConfigurationReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.normalgw.bacnet.GetConfigurationReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.GetConfigurationReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocalIfname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLocalIfAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLocalBcastAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAvailableInterfacesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.normalgw.bacnet.GetConfigurationReply.Interface.serializeBinaryToWriter
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getBbmdAddress();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBbmdPort();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getBbmdTtl();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getBbmdStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getDeviceInstance();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getDeviceName();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getDebug();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.normalgw.bacnet.GetConfigurationReply.BBMDStatus = {
  BBMD_UNKNOWN: 0,
  BBMD_SUCCESS: 1,
  BBMD_FAILURE: 2
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.normalgw.bacnet.GetConfigurationReply.Interface.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.normalgw.bacnet.GetConfigurationReply.Interface.prototype.toObject = function(opt_includeInstance) {
  return proto.normalgw.bacnet.GetConfigurationReply.Interface.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.normalgw.bacnet.GetConfigurationReply.Interface} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.GetConfigurationReply.Interface.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    addressesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.normalgw.bacnet.GetConfigurationReply.Interface}
 */
proto.normalgw.bacnet.GetConfigurationReply.Interface.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.normalgw.bacnet.GetConfigurationReply.Interface;
  return proto.normalgw.bacnet.GetConfigurationReply.Interface.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.normalgw.bacnet.GetConfigurationReply.Interface} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.normalgw.bacnet.GetConfigurationReply.Interface}
 */
proto.normalgw.bacnet.GetConfigurationReply.Interface.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addAddresses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.GetConfigurationReply.Interface.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.normalgw.bacnet.GetConfigurationReply.Interface.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.normalgw.bacnet.GetConfigurationReply.Interface} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.GetConfigurationReply.Interface.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddressesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.normalgw.bacnet.GetConfigurationReply.Interface.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.normalgw.bacnet.GetConfigurationReply.Interface} returns this
 */
proto.normalgw.bacnet.GetConfigurationReply.Interface.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string addresses = 2;
 * @return {!Array<string>}
 */
proto.normalgw.bacnet.GetConfigurationReply.Interface.prototype.getAddressesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.normalgw.bacnet.GetConfigurationReply.Interface} returns this
 */
proto.normalgw.bacnet.GetConfigurationReply.Interface.prototype.setAddressesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.normalgw.bacnet.GetConfigurationReply.Interface} returns this
 */
proto.normalgw.bacnet.GetConfigurationReply.Interface.prototype.addAddresses = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.normalgw.bacnet.GetConfigurationReply.Interface} returns this
 */
proto.normalgw.bacnet.GetConfigurationReply.Interface.prototype.clearAddressesList = function() {
  return this.setAddressesList([]);
};


/**
 * optional string local_ifname = 1;
 * @return {string}
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.getLocalIfname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.normalgw.bacnet.GetConfigurationReply} returns this
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.setLocalIfname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string local_if_address = 2;
 * @return {string}
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.getLocalIfAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.normalgw.bacnet.GetConfigurationReply} returns this
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.setLocalIfAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string local_bcast_address = 3;
 * @return {string}
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.getLocalBcastAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.normalgw.bacnet.GetConfigurationReply} returns this
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.setLocalBcastAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Interface available_interfaces = 4;
 * @return {!Array<!proto.normalgw.bacnet.GetConfigurationReply.Interface>}
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.getAvailableInterfacesList = function() {
  return /** @type{!Array<!proto.normalgw.bacnet.GetConfigurationReply.Interface>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.normalgw.bacnet.GetConfigurationReply.Interface, 4));
};


/**
 * @param {!Array<!proto.normalgw.bacnet.GetConfigurationReply.Interface>} value
 * @return {!proto.normalgw.bacnet.GetConfigurationReply} returns this
*/
proto.normalgw.bacnet.GetConfigurationReply.prototype.setAvailableInterfacesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.normalgw.bacnet.GetConfigurationReply.Interface=} opt_value
 * @param {number=} opt_index
 * @return {!proto.normalgw.bacnet.GetConfigurationReply.Interface}
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.addAvailableInterfaces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.normalgw.bacnet.GetConfigurationReply.Interface, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.normalgw.bacnet.GetConfigurationReply} returns this
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.clearAvailableInterfacesList = function() {
  return this.setAvailableInterfacesList([]);
};


/**
 * optional uint32 port = 5;
 * @return {number}
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.GetConfigurationReply} returns this
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string bbmd_address = 6;
 * @return {string}
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.getBbmdAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.normalgw.bacnet.GetConfigurationReply} returns this
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.setBbmdAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint32 bbmd_port = 7;
 * @return {number}
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.getBbmdPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.GetConfigurationReply} returns this
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.setBbmdPort = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 bbmd_ttl = 8;
 * @return {number}
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.getBbmdTtl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.GetConfigurationReply} returns this
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.setBbmdTtl = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional BBMDStatus bbmd_status = 9;
 * @return {!proto.normalgw.bacnet.GetConfigurationReply.BBMDStatus}
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.getBbmdStatus = function() {
  return /** @type {!proto.normalgw.bacnet.GetConfigurationReply.BBMDStatus} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.normalgw.bacnet.GetConfigurationReply.BBMDStatus} value
 * @return {!proto.normalgw.bacnet.GetConfigurationReply} returns this
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.setBbmdStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional uint32 device_instance = 10;
 * @return {number}
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.getDeviceInstance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.GetConfigurationReply} returns this
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.setDeviceInstance = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string device_name = 11;
 * @return {string}
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.getDeviceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.normalgw.bacnet.GetConfigurationReply} returns this
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.setDeviceName = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bool debug = 12;
 * @return {boolean}
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.getDebug = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.normalgw.bacnet.GetConfigurationReply} returns this
 */
proto.normalgw.bacnet.GetConfigurationReply.prototype.setDebug = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.normalgw.bacnet.SetConfigurationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.normalgw.bacnet.SetConfigurationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.normalgw.bacnet.SetConfigurationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.SetConfigurationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    localIfname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0),
    bbmdAddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    bbmdPort: jspb.Message.getFieldWithDefault(msg, 4, 0),
    bbmdTtl: jspb.Message.getFieldWithDefault(msg, 5, 0),
    bbmdDisable: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    debug: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    deviceInstance: jspb.Message.getFieldWithDefault(msg, 8, 0),
    deviceName: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.normalgw.bacnet.SetConfigurationRequest}
 */
proto.normalgw.bacnet.SetConfigurationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.normalgw.bacnet.SetConfigurationRequest;
  return proto.normalgw.bacnet.SetConfigurationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.normalgw.bacnet.SetConfigurationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.normalgw.bacnet.SetConfigurationRequest}
 */
proto.normalgw.bacnet.SetConfigurationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalIfname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBbmdAddress(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBbmdPort(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBbmdTtl(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBbmdDisable(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebug(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceInstance(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.SetConfigurationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.normalgw.bacnet.SetConfigurationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.normalgw.bacnet.SetConfigurationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.SetConfigurationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocalIfname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBbmdAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBbmdPort();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getBbmdTtl();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getBbmdDisable();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getDebug();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getDeviceInstance();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getDeviceName();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string local_ifname = 1;
 * @return {string}
 */
proto.normalgw.bacnet.SetConfigurationRequest.prototype.getLocalIfname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.normalgw.bacnet.SetConfigurationRequest} returns this
 */
proto.normalgw.bacnet.SetConfigurationRequest.prototype.setLocalIfname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 port = 2;
 * @return {number}
 */
proto.normalgw.bacnet.SetConfigurationRequest.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.SetConfigurationRequest} returns this
 */
proto.normalgw.bacnet.SetConfigurationRequest.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string bbmd_address = 3;
 * @return {string}
 */
proto.normalgw.bacnet.SetConfigurationRequest.prototype.getBbmdAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.normalgw.bacnet.SetConfigurationRequest} returns this
 */
proto.normalgw.bacnet.SetConfigurationRequest.prototype.setBbmdAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 bbmd_port = 4;
 * @return {number}
 */
proto.normalgw.bacnet.SetConfigurationRequest.prototype.getBbmdPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.SetConfigurationRequest} returns this
 */
proto.normalgw.bacnet.SetConfigurationRequest.prototype.setBbmdPort = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 bbmd_ttl = 5;
 * @return {number}
 */
proto.normalgw.bacnet.SetConfigurationRequest.prototype.getBbmdTtl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.SetConfigurationRequest} returns this
 */
proto.normalgw.bacnet.SetConfigurationRequest.prototype.setBbmdTtl = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool bbmd_disable = 6;
 * @return {boolean}
 */
proto.normalgw.bacnet.SetConfigurationRequest.prototype.getBbmdDisable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.normalgw.bacnet.SetConfigurationRequest} returns this
 */
proto.normalgw.bacnet.SetConfigurationRequest.prototype.setBbmdDisable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool debug = 7;
 * @return {boolean}
 */
proto.normalgw.bacnet.SetConfigurationRequest.prototype.getDebug = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.normalgw.bacnet.SetConfigurationRequest} returns this
 */
proto.normalgw.bacnet.SetConfigurationRequest.prototype.setDebug = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional uint32 device_instance = 8;
 * @return {number}
 */
proto.normalgw.bacnet.SetConfigurationRequest.prototype.getDeviceInstance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.normalgw.bacnet.SetConfigurationRequest} returns this
 */
proto.normalgw.bacnet.SetConfigurationRequest.prototype.setDeviceInstance = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string device_name = 9;
 * @return {string}
 */
proto.normalgw.bacnet.SetConfigurationRequest.prototype.getDeviceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.normalgw.bacnet.SetConfigurationRequest} returns this
 */
proto.normalgw.bacnet.SetConfigurationRequest.prototype.setDeviceName = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.normalgw.bacnet.SetConfigurationReply.prototype.toObject = function(opt_includeInstance) {
  return proto.normalgw.bacnet.SetConfigurationReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.normalgw.bacnet.SetConfigurationReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.SetConfigurationReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.normalgw.bacnet.SetConfigurationReply}
 */
proto.normalgw.bacnet.SetConfigurationReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.normalgw.bacnet.SetConfigurationReply;
  return proto.normalgw.bacnet.SetConfigurationReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.normalgw.bacnet.SetConfigurationReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.normalgw.bacnet.SetConfigurationReply}
 */
proto.normalgw.bacnet.SetConfigurationReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.normalgw.bacnet.SetConfigurationReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.normalgw.bacnet.SetConfigurationReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.normalgw.bacnet.SetConfigurationReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.normalgw.bacnet.SetConfigurationReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.normalgw.bacnet);
