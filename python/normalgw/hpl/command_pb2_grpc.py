# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from normalgw.hpl import command_pb2 as normalgw_dot_hpl_dot_command__pb2


class CommandManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartCommand = channel.unary_unary(
                '/normalgw.hpl.CommandManager/StartCommand',
                request_serializer=normalgw_dot_hpl_dot_command__pb2.StartCommandRequest.SerializeToString,
                response_deserializer=normalgw_dot_hpl_dot_command__pb2.StartCommandReply.FromString,
                )
        self.GetCommands = channel.unary_unary(
                '/normalgw.hpl.CommandManager/GetCommands',
                request_serializer=normalgw_dot_hpl_dot_command__pb2.GetCommandsRequest.SerializeToString,
                response_deserializer=normalgw_dot_hpl_dot_command__pb2.GetCommandsReply.FromString,
                )
        self.CancelCommand = channel.unary_unary(
                '/normalgw.hpl.CommandManager/CancelCommand',
                request_serializer=normalgw_dot_hpl_dot_command__pb2.CancelCommandRequest.SerializeToString,
                response_deserializer=normalgw_dot_hpl_dot_command__pb2.CancelCommandReply.FromString,
                )
        self.ExtendCommand = channel.unary_unary(
                '/normalgw.hpl.CommandManager/ExtendCommand',
                request_serializer=normalgw_dot_hpl_dot_command__pb2.ExtendCommandRequest.SerializeToString,
                response_deserializer=normalgw_dot_hpl_dot_command__pb2.ExtendCommandReply.FromString,
                )
        self.ObserveRawCommandActions = channel.unary_stream(
                '/normalgw.hpl.CommandManager/ObserveRawCommandActions',
                request_serializer=normalgw_dot_hpl_dot_command__pb2.ObserveRawCommandActionsRequest.SerializeToString,
                response_deserializer=normalgw_dot_hpl_dot_command__pb2.ObserveRawCommandActionsReply.FromString,
                )


class CommandManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StartCommand(self, request, context):
        """
        StartCommand

        Start command initiates a new command for a set of points.


        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCommands(self, request, context):
        """
        GetCommands

        GetCommands returns a list of active commands.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelCommand(self, request, context):
        """
        CancelCommand


        Cancelling a command is the same as causing its lifetime to
        expire early.  Points will be cleared if possible.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExtendCommand(self, request, context):
        """
        ExtendCommand

        Extending a command causes its lifetime to be updated to a new
        time in the future.  This is used to implement a "heartbeat"
        method, where writes can be cleared if the application looses
        connectivity.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ObserveRawCommandActions(self, request, context):
        """
        ObserveRawCommandActions


        Returns a steram of "raw" actions (reads and writes) which were
        initiated by the comman subsystem.  This forms an audit log of

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CommandManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.StartCommand,
                    request_deserializer=normalgw_dot_hpl_dot_command__pb2.StartCommandRequest.FromString,
                    response_serializer=normalgw_dot_hpl_dot_command__pb2.StartCommandReply.SerializeToString,
            ),
            'GetCommands': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCommands,
                    request_deserializer=normalgw_dot_hpl_dot_command__pb2.GetCommandsRequest.FromString,
                    response_serializer=normalgw_dot_hpl_dot_command__pb2.GetCommandsReply.SerializeToString,
            ),
            'CancelCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelCommand,
                    request_deserializer=normalgw_dot_hpl_dot_command__pb2.CancelCommandRequest.FromString,
                    response_serializer=normalgw_dot_hpl_dot_command__pb2.CancelCommandReply.SerializeToString,
            ),
            'ExtendCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.ExtendCommand,
                    request_deserializer=normalgw_dot_hpl_dot_command__pb2.ExtendCommandRequest.FromString,
                    response_serializer=normalgw_dot_hpl_dot_command__pb2.ExtendCommandReply.SerializeToString,
            ),
            'ObserveRawCommandActions': grpc.unary_stream_rpc_method_handler(
                    servicer.ObserveRawCommandActions,
                    request_deserializer=normalgw_dot_hpl_dot_command__pb2.ObserveRawCommandActionsRequest.FromString,
                    response_serializer=normalgw_dot_hpl_dot_command__pb2.ObserveRawCommandActionsReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'normalgw.hpl.CommandManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CommandManager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StartCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/normalgw.hpl.CommandManager/StartCommand',
            normalgw_dot_hpl_dot_command__pb2.StartCommandRequest.SerializeToString,
            normalgw_dot_hpl_dot_command__pb2.StartCommandReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCommands(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/normalgw.hpl.CommandManager/GetCommands',
            normalgw_dot_hpl_dot_command__pb2.GetCommandsRequest.SerializeToString,
            normalgw_dot_hpl_dot_command__pb2.GetCommandsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/normalgw.hpl.CommandManager/CancelCommand',
            normalgw_dot_hpl_dot_command__pb2.CancelCommandRequest.SerializeToString,
            normalgw_dot_hpl_dot_command__pb2.CancelCommandReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExtendCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/normalgw.hpl.CommandManager/ExtendCommand',
            normalgw_dot_hpl_dot_command__pb2.ExtendCommandRequest.SerializeToString,
            normalgw_dot_hpl_dot_command__pb2.ExtendCommandReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ObserveRawCommandActions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/normalgw.hpl.CommandManager/ObserveRawCommandActions',
            normalgw_dot_hpl_dot_command__pb2.ObserveRawCommandActionsRequest.SerializeToString,
            normalgw_dot_hpl_dot_command__pb2.ObserveRawCommandActionsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
