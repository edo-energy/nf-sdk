# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from normalgw.hpl import point_pb2 as normalgw_dot_hpl_dot_point__pb2


class PointManagerStub(object):
    """
    Point Service

    The point service is the main interface into the configuration
    state stored on the device.  It provides:

    * Efficient full-text search of all objects on the device
    * 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPoints = channel.unary_unary(
                '/normalgw.hpl.PointManager/GetPoints',
                request_serializer=normalgw_dot_hpl_dot_point__pb2.GetPointsRequest.SerializeToString,
                response_deserializer=normalgw_dot_hpl_dot_point__pb2.GetPointsReply.FromString,
                )
        self.GetPointsById = channel.unary_unary(
                '/normalgw.hpl.PointManager/GetPointsById',
                request_serializer=normalgw_dot_hpl_dot_point__pb2.GetPointsByIdRequest.SerializeToString,
                response_deserializer=normalgw_dot_hpl_dot_point__pb2.GetPointsReply.FromString,
                )
        self.GetDistinctAttrs = channel.unary_unary(
                '/normalgw.hpl.PointManager/GetDistinctAttrs',
                request_serializer=normalgw_dot_hpl_dot_point__pb2.GetDistinctAttrsRequest.SerializeToString,
                response_deserializer=normalgw_dot_hpl_dot_point__pb2.GetDistinctAttrsReply.FromString,
                )
        self.GetData = channel.unary_unary(
                '/normalgw.hpl.PointManager/GetData',
                request_serializer=normalgw_dot_hpl_dot_point__pb2.GetDataRequest.SerializeToString,
                response_deserializer=normalgw_dot_hpl_dot_point__pb2.GetDataReply.FromString,
                )
        self.AddPointsData = channel.unary_unary(
                '/normalgw.hpl.PointManager/AddPointsData',
                request_serializer=normalgw_dot_hpl_dot_point__pb2.AddPointsDataRequest.SerializeToString,
                response_deserializer=normalgw_dot_hpl_dot_point__pb2.AddPointsDataReply.FromString,
                )
        self.UpdatePoints = channel.unary_unary(
                '/normalgw.hpl.PointManager/UpdatePoints',
                request_serializer=normalgw_dot_hpl_dot_point__pb2.UpdatePointsRequest.SerializeToString,
                response_deserializer=normalgw_dot_hpl_dot_point__pb2.UpdatePointsReply.FromString,
                )
        self.RenamePoint = channel.unary_unary(
                '/normalgw.hpl.PointManager/RenamePoint',
                request_serializer=normalgw_dot_hpl_dot_point__pb2.RenamePointRequest.SerializeToString,
                response_deserializer=normalgw_dot_hpl_dot_point__pb2.RenamePointReply.FromString,
                )
        self.DeletePoints = channel.unary_unary(
                '/normalgw.hpl.PointManager/DeletePoints',
                request_serializer=normalgw_dot_hpl_dot_point__pb2.DeletePointsRequest.SerializeToString,
                response_deserializer=normalgw_dot_hpl_dot_point__pb2.DeletePointsReply.FromString,
                )
        self.ObservePointsUpdates = channel.unary_stream(
                '/normalgw.hpl.PointManager/ObservePointsUpdates',
                request_serializer=normalgw_dot_hpl_dot_point__pb2.ObservePointsUpdatesRequest.SerializeToString,
                response_deserializer=normalgw_dot_hpl_dot_point__pb2.ObservePointsUpdatesReply.FromString,
                )
        self.ObserveDataUpdates = channel.unary_stream(
                '/normalgw.hpl.PointManager/ObserveDataUpdates',
                request_serializer=normalgw_dot_hpl_dot_point__pb2.ObserveDataUpdatesRequest.SerializeToString,
                response_deserializer=normalgw_dot_hpl_dot_point__pb2.ObserveDataUpdatesReply.FromString,
                )
        self.ObserveErrorUpdates = channel.unary_stream(
                '/normalgw.hpl.PointManager/ObserveErrorUpdates',
                request_serializer=normalgw_dot_hpl_dot_point__pb2.ObserveErrorUpdatesRequest.SerializeToString,
                response_deserializer=normalgw_dot_hpl_dot_point__pb2.ObserveErrorUpdatesReply.FromString,
                )


class PointManagerServicer(object):
    """
    Point Service

    The point service is the main interface into the configuration
    state stored on the device.  It provides:

    * Efficient full-text search of all objects on the device
    * 
    """

    def GetPoints(self, request, context):
        """
        GetPoints

        Perform a search for points using the full-text search.  In
        addition to full-text search (see the query syntax here:
        https://oss.redislabs.com/redisearch/Query_Syntax/), the
        following attributes are indexed and searchable:

        * `uuid`
        * `attr_device_id` BACnet device id
        * `attr_type` BACnet object type
        * `attr_instance` BACnet object instance
        * `attr_prop_units` BACnet units (numeric enum value)
        * `attr_prop_object_name` BACnet object name
        * `attr_prop_description` BACnet description
        * `period` polling rate, in seconds
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPointsById(self, request, context):
        """
        GetPointsById

        Lookup points by UUID.  The reply format is the same as
        GetPoints, but pagination and sorting are not supported.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDistinctAttrs(self, request, context):
        """
        GetDistinctAttrs

        Return a list of distinct values and counts for attributes.  For
        instance, you can use this to generate a list of filters, or find
        all of the different object names, vendors, or software
        revisions.  The attributes do not need to be indexed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetData(self, request, context):
        """
        GetData

        GetData queries the time series data available on the device.
        Note the default retention period for in-memory data is one week.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddPointsData(self, request, context):
        """
        AddPointsData

        This endpoint adds timeseries and error data to the stream.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePoints(self, request, context):
        """
        UpdatePoints

        Create or update points objects.  If verion is nil, will be
        treated as a create and will fail if the uuid already exists.  if the
        version is not nil, will succeed only if the database version matches
        the version provided.  

        One common use case of this is to configure polling, by editing
        the "period" field.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RenamePoint(self, request, context):
        """
        RenamePoint

        Change the UUID of a point, preserving all time series data.
        ObservePointsUpdate will send consumers an update record with
        the old and new UUIDs; however, Not all consumers may expect
        this so this can be what disruptive.  

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePoints(self, request, context):
        """
        DeletePoints

        Remove the point object and any underlying data from the system.
        This does not remove data from the update log.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ObservePointsUpdates(self, request, context):
        """
        ObservePointsUpdates

        Streaming method for obtaining a stream of changes to the object
        database.  Each record contains the old and new version of the
        object, which can be compared.  For new objects, the "old" field
        is nil; while for deleted objects, the "new" field is nil.

        When used with the REST API, the version, limit, and wait
        parameters can be used to read chunks of the change log.  The
        first version is always `0-0`, and so the log can be read back in
        chunks by starting with this version and then providing the last
        version received until no more records are obtained.  By default
        the method returns records starting at the current head of the
        log.

        * `version` the version number to begin reading at
        * `limit` how many changes to write to the stream before closing the connection.
        * `wait` if the consumer should wait for new records once the head of the log is encountered.  Not recommended for use with the REST api.

        UUID filtering is not currently implemented.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ObserveDataUpdates(self, request, context):
        """
        ObserveDataUpdates

        Streaming method for obtaining values.  This can be used either
        for real-time use or for reliablity archiving readings.

        Although it is possible to construct a timeseries from this data,
        this interface is primarly designed to stream all data to another
        database.  The default retention period for this interface is one
        month, and data are stored sequentially on disk.

        If `withMetadata` is set, each data point will also include the point
        object's metadata.  An important details is that the metadata is not logged at the time of data collection, but retrieved when the value is sent to the consumer; so metadata changes may not be accurately reflected.  If this will cause a problem, consumers should also consume `ObservePointsUpdates` to identify when metadata has changed.

        UUID filtering is not currently implemented.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ObserveErrorUpdates(self, request, context):
        """
        ObserveErrorUpdates

        Streaming method for reading back errors encountered during polling.  Errors are stored sequentially on disk, and the default retention period is one month.

        UUID filtering is not currently implemented.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PointManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPoints': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPoints,
                    request_deserializer=normalgw_dot_hpl_dot_point__pb2.GetPointsRequest.FromString,
                    response_serializer=normalgw_dot_hpl_dot_point__pb2.GetPointsReply.SerializeToString,
            ),
            'GetPointsById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPointsById,
                    request_deserializer=normalgw_dot_hpl_dot_point__pb2.GetPointsByIdRequest.FromString,
                    response_serializer=normalgw_dot_hpl_dot_point__pb2.GetPointsReply.SerializeToString,
            ),
            'GetDistinctAttrs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDistinctAttrs,
                    request_deserializer=normalgw_dot_hpl_dot_point__pb2.GetDistinctAttrsRequest.FromString,
                    response_serializer=normalgw_dot_hpl_dot_point__pb2.GetDistinctAttrsReply.SerializeToString,
            ),
            'GetData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetData,
                    request_deserializer=normalgw_dot_hpl_dot_point__pb2.GetDataRequest.FromString,
                    response_serializer=normalgw_dot_hpl_dot_point__pb2.GetDataReply.SerializeToString,
            ),
            'AddPointsData': grpc.unary_unary_rpc_method_handler(
                    servicer.AddPointsData,
                    request_deserializer=normalgw_dot_hpl_dot_point__pb2.AddPointsDataRequest.FromString,
                    response_serializer=normalgw_dot_hpl_dot_point__pb2.AddPointsDataReply.SerializeToString,
            ),
            'UpdatePoints': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePoints,
                    request_deserializer=normalgw_dot_hpl_dot_point__pb2.UpdatePointsRequest.FromString,
                    response_serializer=normalgw_dot_hpl_dot_point__pb2.UpdatePointsReply.SerializeToString,
            ),
            'RenamePoint': grpc.unary_unary_rpc_method_handler(
                    servicer.RenamePoint,
                    request_deserializer=normalgw_dot_hpl_dot_point__pb2.RenamePointRequest.FromString,
                    response_serializer=normalgw_dot_hpl_dot_point__pb2.RenamePointReply.SerializeToString,
            ),
            'DeletePoints': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePoints,
                    request_deserializer=normalgw_dot_hpl_dot_point__pb2.DeletePointsRequest.FromString,
                    response_serializer=normalgw_dot_hpl_dot_point__pb2.DeletePointsReply.SerializeToString,
            ),
            'ObservePointsUpdates': grpc.unary_stream_rpc_method_handler(
                    servicer.ObservePointsUpdates,
                    request_deserializer=normalgw_dot_hpl_dot_point__pb2.ObservePointsUpdatesRequest.FromString,
                    response_serializer=normalgw_dot_hpl_dot_point__pb2.ObservePointsUpdatesReply.SerializeToString,
            ),
            'ObserveDataUpdates': grpc.unary_stream_rpc_method_handler(
                    servicer.ObserveDataUpdates,
                    request_deserializer=normalgw_dot_hpl_dot_point__pb2.ObserveDataUpdatesRequest.FromString,
                    response_serializer=normalgw_dot_hpl_dot_point__pb2.ObserveDataUpdatesReply.SerializeToString,
            ),
            'ObserveErrorUpdates': grpc.unary_stream_rpc_method_handler(
                    servicer.ObserveErrorUpdates,
                    request_deserializer=normalgw_dot_hpl_dot_point__pb2.ObserveErrorUpdatesRequest.FromString,
                    response_serializer=normalgw_dot_hpl_dot_point__pb2.ObserveErrorUpdatesReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'normalgw.hpl.PointManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PointManager(object):
    """
    Point Service

    The point service is the main interface into the configuration
    state stored on the device.  It provides:

    * Efficient full-text search of all objects on the device
    * 
    """

    @staticmethod
    def GetPoints(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/normalgw.hpl.PointManager/GetPoints',
            normalgw_dot_hpl_dot_point__pb2.GetPointsRequest.SerializeToString,
            normalgw_dot_hpl_dot_point__pb2.GetPointsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPointsById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/normalgw.hpl.PointManager/GetPointsById',
            normalgw_dot_hpl_dot_point__pb2.GetPointsByIdRequest.SerializeToString,
            normalgw_dot_hpl_dot_point__pb2.GetPointsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDistinctAttrs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/normalgw.hpl.PointManager/GetDistinctAttrs',
            normalgw_dot_hpl_dot_point__pb2.GetDistinctAttrsRequest.SerializeToString,
            normalgw_dot_hpl_dot_point__pb2.GetDistinctAttrsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/normalgw.hpl.PointManager/GetData',
            normalgw_dot_hpl_dot_point__pb2.GetDataRequest.SerializeToString,
            normalgw_dot_hpl_dot_point__pb2.GetDataReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddPointsData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/normalgw.hpl.PointManager/AddPointsData',
            normalgw_dot_hpl_dot_point__pb2.AddPointsDataRequest.SerializeToString,
            normalgw_dot_hpl_dot_point__pb2.AddPointsDataReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdatePoints(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/normalgw.hpl.PointManager/UpdatePoints',
            normalgw_dot_hpl_dot_point__pb2.UpdatePointsRequest.SerializeToString,
            normalgw_dot_hpl_dot_point__pb2.UpdatePointsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RenamePoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/normalgw.hpl.PointManager/RenamePoint',
            normalgw_dot_hpl_dot_point__pb2.RenamePointRequest.SerializeToString,
            normalgw_dot_hpl_dot_point__pb2.RenamePointReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeletePoints(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/normalgw.hpl.PointManager/DeletePoints',
            normalgw_dot_hpl_dot_point__pb2.DeletePointsRequest.SerializeToString,
            normalgw_dot_hpl_dot_point__pb2.DeletePointsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ObservePointsUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/normalgw.hpl.PointManager/ObservePointsUpdates',
            normalgw_dot_hpl_dot_point__pb2.ObservePointsUpdatesRequest.SerializeToString,
            normalgw_dot_hpl_dot_point__pb2.ObservePointsUpdatesReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ObserveDataUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/normalgw.hpl.PointManager/ObserveDataUpdates',
            normalgw_dot_hpl_dot_point__pb2.ObserveDataUpdatesRequest.SerializeToString,
            normalgw_dot_hpl_dot_point__pb2.ObserveDataUpdatesReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ObserveErrorUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/normalgw.hpl.PointManager/ObserveErrorUpdates',
            normalgw_dot_hpl_dot_point__pb2.ObserveErrorUpdatesRequest.SerializeToString,
            normalgw_dot_hpl_dot_point__pb2.ObserveErrorUpdatesReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
